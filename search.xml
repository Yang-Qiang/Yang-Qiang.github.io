<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Openvswitch入门]]></title>
    <url>%2F2018%2F05%2F22%2FOpenvswitch%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[OVS 网络架构 OVS概念BridgeBridge代表一个以太网交换机(Switch)，一个主机中可以创建一个或者多个Bridge。Bridge的功能是根据一定规则，把从端口收到的数据包转发到另一个或多个端口，上面例子中有三个Bridge，br-tun，br-int，br-ext 添加一个网桥br0 1ovs-vsctl add-br br0 Port端口Port与物理交换机的端口概念类似，Port是OVS Bridge上创建的一个虚拟端口，每个Port都隶属于一个Bridge。Port有以下几种类型 Normal 可以把操作系统中已有的网卡(物理网卡em1/eth0,或虚拟机的虚拟网卡tapxxx)挂载到ovs上，ovs会生成一个同名Port处理这块网卡进出的数据包。此时端口类型为Normal。 如下，主机中有一块物理网卡eth1，把其挂载到OVS网桥br-ext上，OVS会自动创建同名Port eth1。 12ovs-vsctl add-port br-ext eth1#Bridge br-ext中出现Port "eth1" 有一点要注意的是，挂载到OVS上的网卡设备不支持分配IP地址，因此若之前eth1配置有IP地址，挂载到OVS之后IP地址将不可访问。这里的网卡设备不只包括物理网卡，也包括主机上创建的虚拟网卡 Internal Internal类型是OVS内部创建的虚拟网卡接口，每创建一个Port，OVS会自动创建一个同名接口(Interface)挂载到新创建的Port上。接口的概念下面会提到。 下面创建一个网桥br0，并创建一个Internal类型的Port p0 12345678910111213ovs-vsctl add-br br0 ovs-vsctl add-port br0 p0 -- set Interface p0 type=internal#查看网桥br0 ovs-vsctl show br0 Bridge "br0" fail_mode: secure Port "p0" Interface "p0" type: internal Port "br0" Interface "br0" type: internal 可以看到有两个Port。当ovs创建一个新网桥时，默认会创建一个与网桥同名的Internal Port。在OVS中，只有”internal”类型的设备才支持配置IP地址信息，因此我们可以为br0接口配置一个IP地址，当然p0也可以配置IP地址 1234ip addr add 192.168.10.11/24 dev br0ip link set br0 up#添加默认路由ip route add default via 192.168.10.1 dev br0 上面两种Port类型区别在于，Internal类型会自动创建接口(Interface)，而Normal类型是把主机中已有的网卡接口添加到OVS中 Patch 当主机中有多个ovs网桥时，可以使用Patch Port把两个网桥连起来。Patch Port总是成对出现，分别连接在两个网桥上，从一个Patch Port收到的数据包会被转发到另一个Patch Port，类似于Linux系统中的veth。使用Patch连接的两个网桥跟一个网桥没什么区别，OpenStack Neutron中使用到了Patch Port。上面网桥br-ext中的Port phy-br-ext与br-int中的Port int-br-ext是一对Patch Port 可以使用ovs-vsctl创建patch设备，如下创建两个网桥br0,br1，然后使用一对Patch Port连接它们 123456789101112131415161718192021222324ovs-vsctl add-br br0ovs-vsctl add-br br1ovs-vsctl \-- add-port br0 patch0 -- set interface patch0 type=patch options:peer=patch1 \-- add-port br1 patch1 -- set interface patch1 type=patch options:peer=patch0#结果如下#ovs-vsctl show Bridge "br0" Port "br0" Interface "br0" type: internal Port "patch0" Interface "patch0" type: patch options: &#123;peer="patch1"&#125; Bridge "br1" Port "br1" Interface "br1" type: internal Port "patch1" Interface "patch1" type: patch options: &#123;peer="patch0"&#125; 连接两个网桥不止上面一种方法，linux中支持创建Veth设备对，我们可以首先创建一对Veth设备对，然后把这两个Veth分别添加到两个网桥上，其效果跟OVS中创建Patch Port一样，只是性能会有差别 12345#创建veth设备对veth-a,veth-bip link add veth-a type veth peer name veth-b#使用Veth连接两个网桥ovs-vsctl add-port br0 veth-aovs-vsctl add-port br1 veth-b Tunnel OVS中支持添加隧道(Tunnel)端口，常见隧道技术有两种gre或vxlan。隧道技术是在现有的物理网络之上构建一层虚拟网络，上层应用只与虚拟网络相关，以此实现的虚拟网络比物理网络配置更加灵活，并能够实现跨主机的L2通信以及必要的租户隔离。不同隧道技术其大体思路均是将以太网报文使用隧道协议封装，然后使用底层IP网络转发封装后的数据包，其差异性在于选择和构造隧道的协议不同。Tunnel在OpenStack中用作实现大二层网络以及租户隔离，以应对公有云大规模，多租户的复杂网络环境。 OpenStack是多节点结构，同一子网的虚拟机可能被调度到不同计算节点上，因此需要有隧道技术来保证这些同子网不同节点上的虚拟机能够二层互通，就像他们连接在同一个交换机上，同时也要保证能与其它子网隔离。 OVS在计算和网络节点上建立隧道Port来连接各节点上的网桥br-int，这样所有网络和计算节点上的br-int互联形成了一个大的虚拟的跨所有节点的逻辑网桥(内部靠tunnel id或VNI隔离不同子网)，这个逻辑网桥对虚拟机和qrouter是透明的，它们觉得自己连接到了一个大的br-int上。从某个计算节点虚拟机发出的数据包会被封装进隧道通过底层网络传输到目的主机然后解封装。 上面网桥br-tun中Port &quot;vxlan-080058ca&quot;就是一个vxlan类型tunnel端口。下面使用两台主机测试创建vxlan隧道 12345678#主机192.168.7.21上ovs-vsctl add-br br-vxlan#主机192.168.7.23上ovs-vsctl add-br br-vxlan#主机192.168.7.21上添加连接到7.23的Tunnel Portovs-vsctl add-port br-vxlan tun0 -- set Interface tun0 type=vxlan options:remote_ip=192.168.7.23#主机192.168.7.23上添加连接到7.21的Tunnel Portovs-vsctl add-port br-vxlan tun0 -- set Interface tun0 type=vxlan options:remote_ip=192.168.7.21 然后，两个主机上桥接到br-vxlan的虚拟机就像连接到同一个交换机一样，可以实现跨主机的L2连接，同时又完全与物理网络隔离。 InterfaceInterface是连接到Port的网络接口设备，是OVS与外部交换数据包的组件，在通常情况下，Port和Interface是一对一的关系，只有在配置Port为 bond模式后，Port和Interface是一对多的关系。这个网络接口设备可能是创建Internal类型Port时OVS自动生成的虚拟网卡，也可能是系统的物理网卡或虚拟网卡(TUN/TAP)挂载在ovs上。 OVS中只有”Internal”类型的网卡接口才支持配置IP地址 Interface是一块网络接口设备，负责接收或发送数据包，Port是OVS网桥上建立的一个虚拟端口，Interface挂载在Port上。 ControllerOpenFlow控制器。OVS可以同时接受一个或者多个OpenFlow控制器的管理。主要作用是下发流表(Flow Tables)到OVS，控制OVS数据包转发规则。控制器与OVS通过网络连接，不一定要在同一主机上 可以看到上面实例中三个网桥br-int,br-ext,br-tun都连接到控制器Controller &quot;tcp:127.0.0.1:6633上 datapathOVS内核模块，负责执行数据交换。其内部有作为缓存使用的flows，上面已经介绍过 OVS中的各种流(flows)flows是OVS进行数据转发策略控制的核心数据结构，区别于Linux Bridge是个单纯基于MAC地址学习的二层交换机，flows的存在使OVS作为一款SDN交换机成为云平台网络虚拟机化主要组件 OVS中有多种flows存在，用于不同目的，但最主要的还是OpenFlow flows这种，文中未明确说明的flows都是指OpenFlow flows OpenFlow flowsOVS中最重要的一种flows，Controller控制器下发的就是这种flows，OVS架构部分已经简单介绍过，关于openflow的具体使用，会在另一篇文章中说明 “hidden” flowsOVS在使用OpenFlow flow时，需要与OpenFlow控制器建立TCP连接，若此TCP连接不依赖OVS，即没有OVS依然可以建立连接，此时就是out-of-band control模式，这种模式下不需要”hidden” flows 但是在in-band control模式下，TCP连接的建立依赖OVS控制的网络，但此时OVS依赖OpenFLow控制器下发的flows才能正常工作，没法建立TCP连接也就无法下发flows，这就产生矛盾了，因此需要存在一些”hidden” flows，这些”hidden” flows保证了TCP连接能够正常建立。关于in-band control详细介绍，参考OVS官方文档Design Decisions In Open vSwitch 中In-Band Control部分 “hidden” flows优先级高于OpenFlow flows，它们不需要手动设置。可以使用ovs-appctl查看这些flows，下面命令输出内容包括OpenFlow flows,&quot;hidden&quot; flows 1ovs-appctl bridge/dump-flows &lt;br&gt; datapath flowsdatapath flows是datapath内核模块维护的flows，由内核模块维护意味着我们并不需要去修改管理它。与OpenFlow flows不同的是，它不支持优先级，并且只有一个表，这些特点使它非常适合做缓存。与OpenFlow一样的是它支持通配符，也支持指令集(多个action) datapath flows可以来自用户空间ovs-vswitchd缓存，也可以是datapath内核模块进行MAC地址学习到的flows，这取决与OVS是作为SDN交换机，还是像Linux Bridge那样只是一个简单基于MAC地址学习的二层交换机 管理flows的命令行工具我们可以修改和配置的是OpenFlow flows。datapath flow和”hidden” flows由OVS自身管理，我们不必去修改它。当然，调试场景下还是可以使用工具修改的 介绍下上面三种flows管理工具，不具体说明，具体使用可以查看相关man手册 ovs-ofctl dump-flows &lt;br&gt; 打印指定网桥内的所有OpenFlow flows，可以存在多个流表(flow tables)，按表顺序显示。不包括”hidden” flows。这是最常用的查看flows命令，当然这条命令对所有OpenFlow交换机都有效，不单单是OVS ovs-appctl bridge/dump-flows &lt;br&gt; 打印指定网桥内所有OpenFlow flows，包括”hidden” flows，in-band control模式下排错可以用到 ovs-dpctl dump-flows [dp] 打印内核模块中datapath flows，[dp]可以省略，默认主机中只有一个datapath system@ovs-systemman手册可以找到非常详细的用法说明，注意ovs-ofctl管理的是OpenFlow flows ovs-*工具的使用及区别上面介绍了OVS用户空间进程以及控制器和OpenFlow协议，这里说下相关的命令行工具的使用及区别 ovs-vsctl ovs-vsctl是一个管理或配置ovs-vswitchd的高级命令行工具，高级是说其操作对用户友好，封装了对数据库的操作细节。它是管理OVS最常用的命令，除了配置flows之外，其它大部分操作比如Bridge/Port/Interface/Controller/Database/Vlan等都可以完成 123456789101112131415161718192021222324#添加网桥br0ovs-vsctl add-br br0#列出所有网桥 ovs-vsctl list-br#添加一个Port p1到网桥br0ovs-vsctl add-port br0 p1#查看网桥br0上所有Port ovs-vsctl list-ports br0#获取br0网桥的OpenFlow控制器地址，没有控制器则返回空 ovs-vsctl get-controller br0#设置OpenFlow控制器,控制器地址为192.168.1.10，端口为6633ovs-vsctl set-controller br0 tcp:192.168.1.10:6633#移除controllerovs-vsctl del-controller br0#删除网桥br0ovs-vsctl del-br br0#设置端口p1的vlan tag为100ovs-vsctl set Port p1 tag=100#设置Port p0类型为internalovs-vsctl set Interface p0 type=internal#添加vlan10端口，并设置vlan tag为10，Port类型为Internalovs-vsctl add-port br0 vlan10 tag=10 -- set Interface vlan10 type=internal#添加隧道端口gre0，类型为gre，远端IP为1.2.3.4ovs-vsctl add-port br0 gre0 -- set Interface gre0 type=gre options:remote_ip=1.2.3.4 ovsdb-tool ovsdb-tool是一个专门管理OVS数据库文件的工具，不常用，它不直接与ovsdb-server进程通信 12345678910111213141516171819#可以使用此工具创建并初始化database文件ovsdb-tool create [db] [schema]#可以使用ovsdb-client get-schema [database]获取某个数据库的schema(json格式)#可以查看数据库更改记录，具体到操作命令，这个比较有用 ovsdb-tool show-log -m record 48: 2017-01-07 03:34:15.147 "ovs-vsctl: ovs-vsctl --timeout=5 -- --if-exists del-port tapcea211ae-10" table Interface row "tapcea211ae-10" (151f66b6): delete row table Port row "tapcea211ae-10" (cc9898cd): delete row table Bridge row "br-int" (fddd5e27): table Open_vSwitch row a9fc1666 (a9fc1666):record 49: 2017-01-07 04:18:23.671 "ovs-vsctl: ovs-vsctl --timeout=5 -- --if-exists del-port tap5b4345ea-d5 -- add-port br-int tap5b4345ea-d5 -- set Interface tap5b4345ea-d5 "external-ids:attached-mac=\"fa:16:3e:50:1b:5b\"" -- set Interface tap5b4345ea-d5 "external-ids:iface-id=\"5b4345ea-d5ea-4285-be99-0e4cadf1600a\"" -- set Interface tap5b4345ea-d5 "external-ids:vm-id=\"0aa2d71e-9b41-4c88-9038-e4d042b6502a\"" -- set Interface tap5b4345ea-d5 external-ids:iface-status=active" table Port insert row "tap5b4345ea-d5" (4befd532): table Interface insert row "tap5b4345ea-d5" (b8a5e830): table Bridge row "br-int" (fddd5e27): table Open_vSwitch row a9fc1666 (a9fc1666):... ovsdb-client ovsdb-client是ovsdb-server进程的命令行工具，主要是从正在运行的ovsdb-server中查询信息，操作的是数据库相关 12345678910#列出主机上的所有databases，默认只有一个库Open_vSwitchovsdb-client list-dbs#获取指定数据库的schema信息ovsdb-client get-schema [DATABASE]#列出指定数据库的所有表ovsdb-client list-tables [DATABASE]#dump指定数据库所有数据,默认dump所有table数据，如果指定table，只dump指定table数据 ovsdb-client dump [DATABASE] [TABLE]#监控指定数据库中的指定表记录改变 ovsdb-client monitor DATABASE TABLE ovs-ofctl ovs-ofctl是专门管理配置OpenFlow交换机的命令行工具，我们可以用它手动配置OVS中的OpenFlow flows，注意其不能操作datapath flows和”hidden” flows 1234567891011121314#查看br-tun中OpenFlow flowsovs-ofctl dump-flows br-tun#查看br-tun端口信息 ovs-ofctl show br-tun#添加新的flow：对于从端口p0进入交换机的数据包，如果它不包含任何VLAN tag，则自动为它添加VLAN tag 101ovs-ofctl add-flow br0 "priority=3,in_port=100,dl_vlan=0xffff,actions=mod_vlan_vid:101,normal"#对于从端口3进入的数据包，若其vlan tag为100，去掉其vlan tag，并从端口1发出 ovs-ofctl add-flow br0 in_port=3,dl_vlan=101,actions=strip_vlan,output:1#添加新的flow: 修改从端口p1收到的数据包的源地址为9.181.137.1,show 查看p1端口ID为100 ovs-ofctl add-flow br0 "priority=1 idle_timeout=0,in_port=100,actions=mod_nw_src:9.181.137.1,normal"#添加新的flow: 重定向所有的ICMP数据包到端口 p2ovs-ofctl add-flow br0 idle_timeout=0,dl_type=0x0800,nw_proto=1,actions=output:102#删除编号为 100 的端口上的所有流表项 ovs-ofctl del-flows br0 "in_port=100"]]></content>
      <categories>
        <category>网络虚拟化</category>
      </categories>
      <tags>
        <tag>openvswitch</tag>
        <tag>网络虚拟化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sysctl]]></title>
    <url>%2F2018%2F05%2F20%2Flinux%E5%91%BD%E4%BB%A4-sysctl%2F</url>
    <content type="text"><![CDATA[sysctl命令被用于在内核运行时动态地修改内核的运行参数，可用的内核参数在目录/proc/sys中。它包含一些TCP/ip堆栈和虚拟内存系统的高级选项， 这可以让有经验的管理员提高引人注目的系统性能。用sysctl可以读取设置超过五百个系统变量。 语法 sysctl(选项)(参数) 选项 -n：打印值时不打印关键字； -e：忽略未知关键字错误； -N：仅打印名称； -w：当改变sysctl设置时使用此项； -p：从配置文件“/etc/sysctl.conf”加载内核参数设置； -a：打印当前所有可用的内核参数变量和值； -A：以表格方式打印当前所有可用的内核参数变量和值。 Linux sysctl命令用于设置系统核心参数。常见用法： 列出系统全部核心参数并分屏显示： sysctl -a | more 核心设置都是文件（.代表子目录），存放在/proc/sys/目录下。 临时修改系统核心参数（核心参数必须用完整字段）： sysctl -w net.ipv4.icmp_echo_ignore_all=”1” 对于x.y.m所在的路径为/proc/sys/x/y/m 。如net.ipv4.icmp_echo_ignore_all对应的文件为/proc/sys/net/ipv4/icmp_echo_ignore_all 注意：-w参数只对英文单词有效，对数字无效。 永久修改系统核心参数（核心参数只用最后的字段）： echo “icmp_echo_ignore_all = 1” &gt;&gt; /etc/sysctl.conf 或者直接修改sysctl.conf配置文件： vi /etc/sysctl.conf 让修改后的系统配置文件生效： sysctl –p 如果仅仅是想临时改变某个系统参数的值,可以用两种方法来实现,例如想启用IP路由转发功能: 1) echo 1 &gt; /proc/sys/net/ipv4/ip_forward 2) sysctl -w net.ipv4.ip_forward=1以上两种方法都可能立即开启路由功能,但如果系统重启,或执行了 service network restart命令,所设置的值即会丢失,如果想永久保留配置,可以修改/etc/sysctl.conf文件将 net.ipv4.ip_forward=0改为net.ipv4.ip_forward=1]]></content>
      <categories>
        <category>linux命令</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[watch]]></title>
    <url>%2F2018%2F05%2F20%2Fwatch%2F</url>
    <content type="text"><![CDATA[watch是一个非常实用的命令，基本所有的Linux发行版都带有这个小工具，如同名字一样，watch可以帮你监测一个命令的运行结果，省得你一遍遍的手动运行。在Linux下，watch是周期性的执行下个程序，并全屏显示执行结果。你可以拿他来监测你想要的一切命令的结果变化，比如 tail 一个 log 文件，ls 监测某个文件的大小变化，看你的想象力了！ 1．命令格式： watch[参数][命令] 2．命令功能： 可以将命令的输出结果输出到标准输出设备，多用于周期性执行命令/定时执行命令 3．命令参数： -n或–interval watch缺省每2秒运行一下程序，可以用-n或-interval来指定间隔的时间。 -d或–differences 用-d或–differences 选项watch 会高亮显示变化的区域。 而-d=cumulative选项会把变动过的地方(不管最近的那次有没有变动)都高亮显示出来。 -t 或-no-title 会关闭watch命令在顶部的时间间隔,命令，当前时间的输出。 -h, --help 查看帮助文档 4．使用实例： 实例1： 命令：每隔一秒高亮显示网络链接数的变化情况 watch -n 1 -d netstat -ant 说明： 其它操作： 切换终端： Ctrl+x 退出watch：Ctrl+g 实例2：每隔一秒高亮显示http链接数的变化情况 命令： watch -n 1 -d &apos;pstree|grep http&apos; 说明： 每隔一秒高亮显示http链接数的变化情况。 后面接的命令若带有管道符，需要加&apos;&apos;将命令区域归整。 实例3：实时查看模拟攻击客户机建立起来的连接数 命令： watch &apos;netstat -an | grep:21 | \ grep&lt;模拟攻击客户机的IP&gt;| wc -l&apos;]]></content>
      <categories>
        <category>linux命令</category>
      </categories>
  </entry>
</search>
