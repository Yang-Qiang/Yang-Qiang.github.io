<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>雪域刀郎的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.yang-qiang.com/"/>
  <updated>2018-06-02T14:54:18.895Z</updated>
  <id>http://www.yang-qiang.com/</id>
  
  <author>
    <name>雪域刀郎</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python函数的参数是值传递还是传引用</title>
    <link href="http://www.yang-qiang.com/2018/05/31/python/python%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0%E6%98%AF%E5%80%BC%E4%BC%A0%E9%80%92%E8%BF%98%E6%98%AF%E4%BC%A0%E5%BC%95%E7%94%A8/"/>
    <id>http://www.yang-qiang.com/2018/05/31/python/python函数的参数是值传递还是传引用/</id>
    <published>2018-05-31T14:29:04.000Z</published>
    <updated>2018-06-02T14:54:18.895Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python函数的四种参数传递方式"><a href="#python函数的四种参数传递方式" class="headerlink" title="python函数的四种参数传递方式"></a>python函数的四种参数传递方式</h1><p>python中函数传递参数有四种形式</p><blockquote><p><code>fun1(a,b,c)</code><br><code>fun2(a=1,b=2,c=3)</code><br><code>fun3(*args)</code><br><code>fun4(**kargs)</code></p></blockquote><p>在 C/C++ 中，传值和传引用是函数参数传递的两种方式，在Python中参数是如何传递的？回答这个问题前，先来看两段代码。</p><p>代码1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(b)</span>:</span></span><br><span class="line">    b = <span class="number">2</span></span><br><span class="line">    print(b)</span><br><span class="line"></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">test(a)  <span class="comment"># 输出：2</span></span><br><span class="line">print(a) <span class="comment"># 输出：1</span></span><br></pre></td></tr></table></figure><p>看了代码段1的同学可能会说参数是值传递。</p><p>代码2：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(args)</span>:</span></span><br><span class="line">    args.append(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">b = []</span><br><span class="line">print(b)<span class="comment">#　输出：[]</span></span><br><span class="line">print(id(b)) <span class="comment"># 输出：6434336712</span></span><br><span class="line">test(b)</span><br><span class="line">print(b) ＃　输出：[<span class="number">1</span>]</span><br><span class="line">print(id(b))  <span class="comment"># 输出：6434336712</span></span><br></pre></td></tr></table></figure><p>看了代码2，这时可能又有人会说，参数是传引用，问题来了，python的函数参数传递到底是传值还是传引用或者说两者都不是？弄清楚这个问题之前，首先了解Python 中变量与对象之间的关系。</p><h1 id="变量与对象"><a href="#变量与对象" class="headerlink" title="变量与对象"></a>变量与对象</h1><p>在Python 中一切皆为对象，数字是对象，字典是对象，列表是对象，甚至函数也是对象，任何东西都是对象。而变量是对象的一个引用，对象的操作都是通过引用来完成的。如[]<code>是一个空列表对象，变量</code>a` 是该对象的一个引用</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> = []</span><br><span class="line"><span class="selector-tag">a</span>.append(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>在 Python 中，赋值操作 <code>=</code> 就是把一个变量<strong>绑定</strong>到一个对象上，像给对象添加一个标签。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>整数 1 赋值给变量 a 就相当于是在整数1上绑定了一个 a 标签。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">a</span> = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>整数 2 赋值给变量 a，相当于把原来整数 1 身上的 a 标签撕掉，贴到整数 2 身上。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">b</span> = a</span><br></pre></td></tr></table></figure><p>把变量 a 赋值给另外一个变量 b，相当于在对象 2 上贴了 a，b 两个标签，通过这两个变量都可以对对象 2 进行操作。</p><p><strong>类型信息存储在对象中，变量本身没有类型信息，这和C/C++中的变量有非常大的出入（C中的变量是一段内存区域）</strong></p><h1 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h1><p>Python 函数中，<strong>参数的传递本质上是一种赋值操作</strong>，而赋值操作是一种名字到对象的绑定过程，清楚了赋值和参数传递的本质之后，现在再来分析前面两段代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(arg)</span>:</span></span><br><span class="line">    arg = <span class="number">2</span></span><br><span class="line">    print(arg)</span><br><span class="line"></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">foo(a)  <span class="comment"># 输出：2</span></span><br><span class="line">print(a) <span class="comment"># 输出：1</span></span><br></pre></td></tr></table></figure><p>在代码1中，变量 a 绑定了 1，调用函数 test(a) 时，相当于给参数 arg 赋值 <code>arg=1</code>，这时两个变量都绑定了对象 1。在函数里面 arg 重新赋值为 2 之后，相当于把 对象1 上的 arg 标签撕掉，贴到 对象2 身上，而对象 1 上的另外一个标签 a 一直存在。因此 print(a) 还是 1。</p><p>再来看一下代码段2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(args)</span>:</span></span><br><span class="line">    args.append(<span class="number">1</span>)</span><br><span class="line">b = []</span><br><span class="line">print(b)<span class="comment">#　输出：[]</span></span><br><span class="line">print(id(b)) <span class="comment"># 输出：6434336712</span></span><br><span class="line">test(b)</span><br><span class="line">print(b) ＃　输出：[<span class="number">1</span>]</span><br><span class="line">print(id(b))  <span class="comment"># 输出：6434336712</span></span><br></pre></td></tr></table></figure><p>执行 append 方法前 b 和 arg 都指向（绑定）同一个对象，执行 append 方法时，并没有重新赋值操作，也就没有新的绑定过程，append 方法只是对列表对象插入一个元素，对象还是那个对象，只是对象里面的内容变了。因为 b 和 arg 都是绑定在同一个对象上，执行 b.append 或者 arg.append 方法本质上都是对同一个对象进行操作，因此 b 的内容在调用函数后发生了变化（但id没有变，还是原来那个对象）</p><p>最后，回到问题本身，究竟是是传值还是传引用呢？说传值或者传引用都不准确。非要安一个确切的叫法的话，<strong>叫传对象</strong>。看下面的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bad_append</span><span class="params">(new_item, a_list=[])</span>:</span></span><br><span class="line">    a_list.append(new_item)</span><br><span class="line">    <span class="keyword">return</span> a_list</span><br></pre></td></tr></table></figure><p>这段代码是python初学者最容易犯的错误，用可变(mutable)对象作为参数的默认值。函数定义好之后，默认参数 <code>a_list</code> 就会绑定到一个空列表对象，每次调用函数时，都是对同一个对象进行 append 操作。因此这样写就会有潜在的bug，同样的调用方式返回了不一样的结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> bad_append(<span class="string">'one'</span>)</span><br><span class="line">[<span class="string">'one'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> bad_append(<span class="string">'one'</span>)</span><br><span class="line">[<span class="string">'one'</span>, <span class="string">'one'</span>]</span><br></pre></td></tr></table></figure><p>而正确的方式是，把参数默认值指定为None</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">good_append</span><span class="params">(new_item, a_list=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> a_list <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">        a_list = []</span><br><span class="line">    a_list.append(new_item)</span><br><span class="line">    <span class="keyword">return</span> a_list</span><br></pre></td></tr></table></figure><h1 id="深拷贝-VS-浅拷贝"><a href="#深拷贝-VS-浅拷贝" class="headerlink" title="深拷贝 VS 浅拷贝"></a>深拷贝 VS 浅拷贝</h1><p>浅拷贝：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>]</span><br><span class="line">m = x.copy()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>]</span><br><span class="line">m = x.copy()</span><br><span class="line">m[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> m <span class="comment">#输出[1, 2, [3, 9], 5]</span></span><br><span class="line"><span class="keyword">print</span> x <span class="comment">#输出[1, 2, [3, 9], 5]</span></span><br><span class="line"></span><br><span class="line">m[<span class="number">1</span>] = <span class="number">10</span></span><br><span class="line"><span class="keyword">print</span> m <span class="comment">#[1, 10, [3, 9], 5]</span></span><br><span class="line"><span class="keyword">print</span> x <span class="comment">#[1, 1, [3, 9], 5]</span></span><br></pre></td></tr></table></figure><p>可以看出，对于浅拷贝来说，不能复制嵌套的对象，值得一提的是分片操作也是浅拷贝，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>]</span><br><span class="line">m = x[:]</span><br><span class="line">m[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">10</span></span><br><span class="line"><span class="keyword">print</span> m <span class="comment">#[1, 2, [3, 10], 5]</span></span><br><span class="line"><span class="keyword">print</span> x <span class="comment">#[1, 2, [3, 10], 5]</span></span><br><span class="line"></span><br><span class="line">m[<span class="number">1</span>] = <span class="number">10</span></span><br><span class="line"><span class="keyword">print</span> m <span class="comment">#[1, 10, [3, 10], 5]</span></span><br><span class="line"><span class="keyword">print</span> x <span class="comment">#[1, 2, [3, 10], 5]</span></span><br></pre></td></tr></table></figure><p>深复制：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>], <span class="number">5</span>]</span><br><span class="line">m = copy.deepcopy(x)</span><br><span class="line">m[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">9</span></span><br><span class="line"><span class="keyword">print</span> m  <span class="comment">#输出[1, 2, [3, 9], 5]</span></span><br><span class="line"><span class="keyword">print</span> x  <span class="comment">#输出[1, 2, [3, 4], 5]</span></span><br><span class="line"></span><br><span class="line">m[<span class="number">1</span>] = <span class="number">10</span></span><br><span class="line"><span class="keyword">print</span> m <span class="comment">#[1, 10, [3, 10], 5]</span></span><br><span class="line"><span class="keyword">print</span> x <span class="comment">#[1, 2, [3, 4], 5]</span></span><br></pre></td></tr></table></figure><p>可以看出深复制可以对嵌套对象进行完整的复制</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python函数的四种参数传递方式&quot;&gt;&lt;a href=&quot;#python函数的四种参数传递方式&quot; class=&quot;headerlink&quot; title=&quot;python函数的四种参数传递方式&quot;&gt;&lt;/a&gt;python函数的四种参数传递方式&lt;/h1&gt;&lt;p&gt;python中函数传
      
    
    </summary>
    
      <category term="编程" scheme="http://www.yang-qiang.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="python" scheme="http://www.yang-qiang.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Openvswitch入门</title>
    <link href="http://www.yang-qiang.com/2018/05/20/%E8%99%9A%E6%8B%9F%E5%8C%96/Openvswitch%E5%85%A5%E9%97%A8/"/>
    <id>http://www.yang-qiang.com/2018/05/20/虚拟化/Openvswitch入门/</id>
    <published>2018-05-20T03:59:22.000Z</published>
    <updated>2018-06-07T14:27:06.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OVS-网络架构"><a href="#OVS-网络架构" class="headerlink" title="OVS 网络架构"></a>OVS 网络架构</h1><p><img src="/2018/05/20/虚拟化/Openvswitch入门/网络架构.jpg" alt="网络架构"></p><h1 id="OVS概念"><a href="#OVS概念" class="headerlink" title="OVS概念"></a>OVS概念</h1><h2 id="Bridge"><a href="#Bridge" class="headerlink" title="Bridge"></a>Bridge</h2><p>Bridge代表一个以太网交换机(Switch)，一个主机中可以创建一个或者多个Bridge。Bridge的功能是根据一定规则，把从端口收到的数据包转发到另一个或多个端口，上面例子中有三个Bridge，<code>br-tun</code>，<code>br-int</code>，<code>br-ext</code></p><p>添加一个网桥<code>br0</code></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ovs-vsctl<span class="built_in"> add-br </span>br0</span><br></pre></td></tr></table></figure><h2 id="Port"><a href="#Port" class="headerlink" title="Port"></a>Port</h2><p>端口Port与物理交换机的端口概念类似，Port是OVS Bridge上创建的一个虚拟端口，每个Port都隶属于一个Bridge。Port有以下几种类型</p><ul><li><strong>Normal</strong></li></ul><p>可以把操作系统中已有的网卡(物理网卡em1/eth0,或虚拟机的虚拟网卡tapxxx)挂载到ovs上，ovs会生成一个同名Port处理这块网卡进出的数据包。此时端口类型为Normal。</p><p>如下，主机中有一块物理网卡<code>eth1</code>，把其挂载到OVS网桥<code>br-ext</code>上，OVS会自动创建同名Port <code>eth1</code>。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ovs-vsctl<span class="built_in"> add-port </span>br-ext eth1</span><br><span class="line"><span class="comment">#Bridge br-ext中出现Port "eth1"</span></span><br></pre></td></tr></table></figure><p>有一点要注意的是，挂载到OVS上的网卡设备不支持分配IP地址，因此若之前<code>eth1</code>配置有IP地址，挂载到OVS之后IP地址将不可访问。这里的网卡设备不只包括物理网卡，也包括主机上创建的虚拟网卡</p><ul><li><strong>Internal</strong></li></ul><p>Internal类型是OVS内部创建的虚拟网卡接口，每创建一个Port，OVS会自动创建一个同名接口(Interface)挂载到新创建的Port上。接口的概念下面会提到。</p><p>下面创建一个网桥br0，并创建一个Internal类型的Port <code>p0</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ovs-vsctl add-br br0   </span><br><span class="line">ovs-vsctl add-port br0 p0 -- <span class="builtin-name">set</span><span class="built_in"> Interface </span>p0 <span class="attribute">type</span>=internal</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看网桥br0   </span></span><br><span class="line">ovs-vsctl show br0</span><br><span class="line">   <span class="built_in"> Bridge </span><span class="string">"br0"</span></span><br><span class="line">        fail_mode: secure</span><br><span class="line">       <span class="built_in"> Port </span><span class="string">"p0"</span></span><br><span class="line">           <span class="built_in"> Interface </span><span class="string">"p0"</span></span><br><span class="line">                type: internal</span><br><span class="line">       <span class="built_in"> Port </span><span class="string">"br0"</span></span><br><span class="line">           <span class="built_in"> Interface </span><span class="string">"br0"</span></span><br><span class="line">                type: internal</span><br></pre></td></tr></table></figure><p>可以看到有两个Port。当ovs创建一个新网桥时，默认会创建一个与网桥同名的Internal Port。在OVS中，只有”internal”类型的设备才支持配置IP地址信息，因此我们可以为<code>br0</code>接口配置一个IP地址，当然<code>p0</code>也可以配置IP地址</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ip addr <span class="builtin-name">add</span> 192.168.10.11/24 dev br0</span><br><span class="line">ip link <span class="builtin-name">set</span> br0 up</span><br><span class="line"><span class="comment">#添加默认路由</span></span><br><span class="line">ip<span class="built_in"> route </span><span class="builtin-name">add</span><span class="built_in"> default </span>via 192.168.10.1 dev br0</span><br></pre></td></tr></table></figure><p>上面两种Port类型区别在于，Internal类型会自动创建接口(Interface)，而Normal类型是把主机中已有的网卡接口添加到OVS中</p><ul><li><strong>Patch</strong></li></ul><p>当主机中有多个ovs网桥时，可以使用Patch Port把两个网桥连起来。Patch Port总是成对出现，分别连接在两个网桥上，从一个Patch Port收到的数据包会被转发到另一个Patch Port，类似于Linux系统中的<code>veth</code>。使用Patch连接的两个网桥跟一个网桥没什么区别，OpenStack Neutron中使用到了Patch Port。上面网桥<code>br-ext</code>中的Port <code>phy-br-ext</code>与<code>br-int</code>中的Port <code>int-br-ext</code>是一对Patch Port</p><p>可以使用<code>ovs-vsctl</code>创建patch设备，如下创建两个网桥<code>br0,br1</code>，然后使用一对<code>Patch Port</code>连接它们</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">ovs-vsctl add-br br0</span><br><span class="line">ovs-vsctl add-br br1</span><br><span class="line">ovs-vsctl \</span><br><span class="line">-- add-port br0 patch0 -- <span class="builtin-name">set</span><span class="built_in"> interface </span>patch0 <span class="attribute">type</span>=patch options:<span class="attribute">peer</span>=patch1 \</span><br><span class="line">-- add-port br1 patch1 -- <span class="builtin-name">set</span><span class="built_in"> interface </span>patch1 <span class="attribute">type</span>=patch options:<span class="attribute">peer</span>=patch0</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果如下</span></span><br><span class="line"><span class="comment">#ovs-vsctl show</span></span><br><span class="line">   <span class="built_in"> Bridge </span><span class="string">"br0"</span></span><br><span class="line">       <span class="built_in"> Port </span><span class="string">"br0"</span></span><br><span class="line">           <span class="built_in"> Interface </span><span class="string">"br0"</span></span><br><span class="line">                type: internal</span><br><span class="line">       <span class="built_in"> Port </span><span class="string">"patch0"</span></span><br><span class="line">           <span class="built_in"> Interface </span><span class="string">"patch0"</span></span><br><span class="line">                type: patch</span><br><span class="line">                options: &#123;<span class="attribute">peer</span>=<span class="string">"patch1"</span>&#125;</span><br><span class="line">   <span class="built_in"> Bridge </span><span class="string">"br1"</span></span><br><span class="line">       <span class="built_in"> Port </span><span class="string">"br1"</span></span><br><span class="line">           <span class="built_in"> Interface </span><span class="string">"br1"</span></span><br><span class="line">                type: internal</span><br><span class="line">       <span class="built_in"> Port </span><span class="string">"patch1"</span></span><br><span class="line">           <span class="built_in"> Interface </span><span class="string">"patch1"</span></span><br><span class="line">                type: patch</span><br><span class="line">                options: &#123;<span class="attribute">peer</span>=<span class="string">"patch0"</span>&#125;</span><br></pre></td></tr></table></figure><p>连接两个网桥不止上面一种方法，linux中支持创建<code>Veth</code>设备对，我们可以首先创建一对<code>Veth</code>设备对，然后把这两个<code>Veth</code>分别添加到两个网桥上，其效果跟OVS中创建Patch Port一样，只是性能会有差别</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建veth设备对veth-a,veth-b</span></span><br><span class="line">ip link <span class="builtin-name">add</span> veth-a<span class="built_in"> type </span>veth<span class="built_in"> peer </span>name veth-b</span><br><span class="line"><span class="comment">#使用Veth连接两个网桥</span></span><br><span class="line">ovs-vsctl add-port br0 veth-a</span><br><span class="line">ovs-vsctl add-port br1 veth-b</span><br></pre></td></tr></table></figure><ul><li><strong>Tunnel</strong></li></ul><p>OVS中支持添加隧道(Tunnel)端口，常见隧道技术有两种<code>gre</code>或<code>vxlan</code>。隧道技术是在现有的物理网络之上构建一层虚拟网络，上层应用只与虚拟网络相关，以此实现的虚拟网络比物理网络配置更加灵活，并能够实现跨主机的L2通信以及必要的租户隔离。不同隧道技术其大体思路均是将以太网报文使用隧道协议封装，然后使用底层IP网络转发封装后的数据包，其差异性在于选择和构造隧道的协议不同。Tunnel在OpenStack中用作实现大二层网络以及租户隔离，以应对公有云大规模，多租户的复杂网络环境。</p><p>OpenStack是多节点结构，同一子网的虚拟机可能被调度到不同计算节点上，因此需要有隧道技术来保证这些同子网不同节点上的虚拟机能够二层互通，就像他们连接在同一个交换机上，同时也要保证能与其它子网隔离。</p><p>OVS在计算和网络节点上建立隧道Port来连接各节点上的网桥<code>br-int</code>，这样所有网络和计算节点上的<code>br-int</code>互联形成了一个大的虚拟的跨所有节点的逻辑网桥(内部靠tunnel id或VNI隔离不同子网)，这个逻辑网桥对虚拟机和qrouter是透明的，它们觉得自己连接到了一个大的<code>br-int</code>上。从某个计算节点虚拟机发出的数据包会被封装进隧道通过底层网络传输到目的主机然后解封装。</p><p>上面网桥<code>br-tun</code>中<code>Port &quot;vxlan-080058ca&quot;</code>就是一个<code>vxlan</code>类型tunnel端口。下面使用两台主机测试创建vxlan隧道</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#主机192.168.7.21上</span></span><br><span class="line">ovs-vsctl<span class="built_in"> add-br </span>br-vxlan</span><br><span class="line"><span class="comment">#主机192.168.7.23上</span></span><br><span class="line">ovs-vsctl<span class="built_in"> add-br </span>br-vxlan</span><br><span class="line"><span class="comment">#主机192.168.7.21上添加连接到7.23的Tunnel Port</span></span><br><span class="line">ovs-vsctl<span class="built_in"> add-port </span>br-vxlan tun0 -- set Interface tun0 type=vxlan options:remote_ip=192.168.7.23</span><br><span class="line"><span class="comment">#主机192.168.7.23上添加连接到7.21的Tunnel Port</span></span><br><span class="line">ovs-vsctl<span class="built_in"> add-port </span>br-vxlan tun0 -- set Interface tun0 type=vxlan options:remote_ip=192.168.7.21</span><br></pre></td></tr></table></figure><p>然后，两个主机上桥接到<code>br-vxlan</code>的虚拟机就像连接到同一个交换机一样，可以实现跨主机的L2连接，同时又完全与物理网络隔离。</p><h2 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h2><p>Interface是连接到Port的网络接口设备，是OVS与外部交换数据包的组件，在通常情况下，Port和Interface是一对一的关系，只有在配置Port为 bond模式后，Port和Interface是一对多的关系。这个网络接口设备可能是创建<code>Internal</code>类型Port时OVS自动生成的虚拟网卡，也可能是系统的物理网卡或虚拟网卡(TUN/TAP)挂载在ovs上。 OVS中只有”Internal”类型的网卡接口才支持配置IP地址</p><p><code>Interface</code>是一块网络接口设备，负责接收或发送数据包，Port是OVS网桥上建立的一个虚拟端口，<code>Interface</code>挂载在Port上。</p><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><p>OpenFlow控制器。OVS可以同时接受一个或者多个OpenFlow控制器的管理。主要作用是下发流表(Flow Tables)到OVS，控制OVS数据包转发规则。控制器与OVS通过网络连接，不一定要在同一主机上</p><p>可以看到上面实例中三个网桥<code>br-int</code>,<code>br-ext</code>,<code>br-tun</code>都连接到控制器<code>Controller &quot;tcp:127.0.0.1:6633</code>上</p><h2 id="datapath"><a href="#datapath" class="headerlink" title="datapath"></a>datapath</h2><p>OVS内核模块，负责执行数据交换。其内部有作为缓存使用的flows，上面已经介绍过</p><h1 id="OVS中的各种流-flows"><a href="#OVS中的各种流-flows" class="headerlink" title="OVS中的各种流(flows)"></a>OVS中的各种流(flows)</h1><p>flows是OVS进行数据转发策略控制的核心数据结构，区别于Linux Bridge是个单纯基于MAC地址学习的二层交换机，flows的存在使OVS作为一款SDN交换机成为云平台网络虚拟机化主要组件</p><p>OVS中有多种flows存在，用于不同目的，但最主要的还是OpenFlow flows这种，文中未明确说明的flows都是指OpenFlow flows</p><h2 id="OpenFlow-flows"><a href="#OpenFlow-flows" class="headerlink" title="OpenFlow flows"></a>OpenFlow flows</h2><p>OVS中最重要的一种flows，Controller控制器下发的就是这种flows，OVS架构部分已经简单介绍过，关于openflow的具体使用，会在另一篇文章中说明</p><h2 id="“hidden”-flows"><a href="#“hidden”-flows" class="headerlink" title="“hidden” flows"></a>“hidden” flows</h2><p>OVS在使用OpenFlow flow时，需要与OpenFlow控制器建立TCP连接，若此TCP连接不依赖OVS，即没有OVS依然可以建立连接，此时就是<code>out-of-band control</code>模式，这种模式下不需要”hidden” flows</p><p>但是在<code>in-band control</code>模式下，TCP连接的建立依赖OVS控制的网络，但此时OVS依赖OpenFLow控制器下发的flows才能正常工作，没法建立TCP连接也就无法下发flows，这就产生矛盾了，因此需要存在一些”hidden” flows，这些”hidden” flows保证了TCP连接能够正常建立。关于<code>in-band control</code>详细介绍，参考OVS官方文档<a href="https://github.com/openvswitch/ovs/blob/master/Documentation/topics/design.rst" target="_blank" rel="noopener">Design Decisions In Open vSwitch</a> 中<strong>In-Band Control</strong>部分</p><p>“hidden” flows优先级高于OpenFlow flows，它们不需要手动设置。可以使用<code>ovs-appctl</code>查看这些flows，下面命令输出内容包括<code>OpenFlow flows</code>,<code>&quot;hidden&quot; flows</code></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">ovs</span>-appctl <span class="keyword">bridge/dump-flows </span>&lt;<span class="keyword">br&gt;</span></span><br></pre></td></tr></table></figure><h2 id="datapath-flows"><a href="#datapath-flows" class="headerlink" title="datapath flows"></a>datapath flows</h2><p>datapath flows是<code>datapath</code>内核模块维护的flows，由内核模块维护意味着我们并不需要去修改管理它。与OpenFlow flows不同的是，它不支持优先级，并且只有一个表，这些特点使它非常适合做缓存。与OpenFlow一样的是它支持通配符，也支持指令集(多个action)</p><p>datapath flows可以来自用户空间<code>ovs-vswitchd</code>缓存，也可以是datapath内核模块进行MAC地址学习到的flows，这取决与OVS是作为SDN交换机，还是像Linux Bridge那样只是一个简单基于MAC地址学习的二层交换机</p><h2 id="管理flows的命令行工具"><a href="#管理flows的命令行工具" class="headerlink" title="管理flows的命令行工具"></a>管理flows的命令行工具</h2><p>我们可以修改和配置的是OpenFlow flows。datapath flow和”hidden” flows由OVS自身管理，我们不必去修改它。当然，调试场景下还是可以使用工具修改的</p><p>介绍下上面三种flows管理工具，不具体说明，具体使用可以查看相关man手册</p><ul><li><code>ovs-ofctl dump-flows &lt;br&gt;</code> 打印指定网桥内的所有OpenFlow flows，可以存在多个流表(flow tables)，按表顺序显示。不包括”hidden” flows。这是最常用的查看flows命令，当然这条命令对所有OpenFlow交换机都有效，不单单是OVS</li><li><code>ovs-appctl bridge/dump-flows &lt;br&gt;</code> 打印指定网桥内所有OpenFlow flows，包括”hidden” flows，<code>in-band control</code>模式下排错可以用到</li><li><code>ovs-dpctl dump-flows [dp]</code> 打印内核模块中datapath flows，<code>[dp]</code>可以省略，默认主机中只有一个datapath <code>system@ovs-system</code><br>man手册可以找到非常详细的用法说明，注意<code>ovs-ofctl</code>管理的是OpenFlow flows</li></ul><h1 id="ovs-工具的使用及区别"><a href="#ovs-工具的使用及区别" class="headerlink" title="ovs-*工具的使用及区别"></a>ovs-*工具的使用及区别</h1><p>上面介绍了OVS用户空间进程以及控制器和OpenFlow协议，这里说下相关的命令行工具的使用及区别</p><p><strong>ovs-vsctl</strong></p><p><code>ovs-vsctl</code>是一个管理或配置<code>ovs-vswitchd</code>的高级命令行工具，高级是说其操作对用户友好，封装了对数据库的操作细节。它是管理OVS最常用的命令，除了配置flows之外，其它大部分操作比如Bridge/Port/Interface/Controller/Database/Vlan等都可以完成</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加网桥br0</span></span><br><span class="line">ovs-vsctl add-br br0</span><br><span class="line"><span class="comment">#列出所有网桥 </span></span><br><span class="line">ovs-vsctl list-br</span><br><span class="line"><span class="comment">#添加一个Port p1到网桥br0</span></span><br><span class="line">ovs-vsctl add-port br0 p1</span><br><span class="line"><span class="comment">#查看网桥br0上所有Port   </span></span><br><span class="line">ovs-vsctl list-ports br0</span><br><span class="line"><span class="comment">#获取br0网桥的OpenFlow控制器地址，没有控制器则返回空 </span></span><br><span class="line">ovs-vsctl get-controller br0</span><br><span class="line"><span class="comment">#设置OpenFlow控制器,控制器地址为192.168.1.10，端口为6633</span></span><br><span class="line">ovs-vsctl set-controller br0 tcp:192.168.1.10:6633</span><br><span class="line"><span class="comment">#移除controller</span></span><br><span class="line">ovs-vsctl del-controller br0</span><br><span class="line"><span class="comment">#删除网桥br0</span></span><br><span class="line">ovs-vsctl del-br br0</span><br><span class="line"><span class="comment">#设置端口p1的vlan tag为100</span></span><br><span class="line">ovs-vsctl <span class="builtin-name">set</span><span class="built_in"> Port </span>p1 <span class="attribute">tag</span>=100</span><br><span class="line"><span class="comment">#设置Port p0类型为internal</span></span><br><span class="line">ovs-vsctl <span class="builtin-name">set</span><span class="built_in"> Interface </span>p0 <span class="attribute">type</span>=internal</span><br><span class="line"><span class="comment">#添加vlan10端口，并设置vlan tag为10，Port类型为Internal</span></span><br><span class="line">ovs-vsctl add-port br0 vlan10 <span class="attribute">tag</span>=10 -- <span class="builtin-name">set</span><span class="built_in"> Interface </span>vlan10 <span class="attribute">type</span>=internal</span><br><span class="line"><span class="comment">#添加隧道端口gre0，类型为gre，远端IP为1.2.3.4</span></span><br><span class="line">ovs-vsctl add-port br0 gre0 -- <span class="builtin-name">set</span><span class="built_in"> Interface </span>gre0 <span class="attribute">type</span>=gre options:<span class="attribute">remote_ip</span>=1.2.3.4</span><br></pre></td></tr></table></figure><p><strong>ovsdb-tool</strong></p><p><code>ovsdb-tool</code>是一个专门管理OVS数据库文件的工具，不常用，它不直接与<code>ovsdb-server</code>进程通信</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以使用此工具创建并初始化database文件</span></span><br><span class="line">ovsdb-tool create [db] [schema]</span><br><span class="line"><span class="comment">#可以使用ovsdb-client get-schema [database]获取某个数据库的schema(json格式)</span></span><br><span class="line"><span class="comment">#可以查看数据库更改记录，具体到操作命令，这个比较有用   </span></span><br><span class="line">ovsdb-tool show-log -m   </span><br><span class="line">record 48: 2017-01-07 03:34:15.147 <span class="string">"ovs-vsctl: ovs-vsctl --timeout=5 -- --if-exists del-port tapcea211ae-10"</span></span><br><span class="line">        table<span class="built_in"> Interface </span>row <span class="string">"tapcea211ae-10"</span> (151f66b6):</span><br><span class="line">                delete row</span><br><span class="line">        table<span class="built_in"> Port </span>row <span class="string">"tapcea211ae-10"</span> (cc9898cd):</span><br><span class="line">                delete row</span><br><span class="line">        table<span class="built_in"> Bridge </span>row <span class="string">"br-int"</span> (fddd5e27):</span><br><span class="line">        table Open_vSwitch row a9fc1666 (a9fc1666):</span><br><span class="line"></span><br><span class="line">record 49: 2017-01-07 04:18:23.671 <span class="string">"ovs-vsctl: ovs-vsctl --timeout=5 -- --if-exists del-port tap5b4345ea-d5 -- add-port br-int tap5b4345ea-d5 -- set Interface tap5b4345ea-d5 "</span>external-ids:<span class="attribute">attached-mac</span>=\"fa:16:3e:50:1b:5b\"" -- <span class="builtin-name">set</span><span class="built_in"> Interface </span>tap5b4345ea-d5 <span class="string">"external-ids:iface-id=\"5b4345ea-d5ea-4285-be99-0e4cadf1600a\""</span> -- <span class="builtin-name">set</span><span class="built_in"> Interface </span>tap5b4345ea-d5 <span class="string">"external-ids:vm-id=\"0aa2d71e-9b41-4c88-9038-e4d042b6502a\""</span> -- <span class="builtin-name">set</span><span class="built_in"> Interface </span>tap5b4345ea-d5 external-ids:<span class="attribute">iface-status</span>=active"</span><br><span class="line">        table<span class="built_in"> Port </span>insert row <span class="string">"tap5b4345ea-d5"</span> (4befd532):</span><br><span class="line">        table<span class="built_in"> Interface </span>insert row <span class="string">"tap5b4345ea-d5"</span> (b8a5e830):</span><br><span class="line">        table<span class="built_in"> Bridge </span>row <span class="string">"br-int"</span> (fddd5e27):</span><br><span class="line">        table Open_vSwitch row a9fc1666 (a9fc1666):</span><br><span class="line"><span class="built_in">..</span>.</span><br></pre></td></tr></table></figure><p><strong>ovsdb-client</strong></p><p><code>ovsdb-client</code>是<code>ovsdb-server</code>进程的命令行工具，主要是从正在运行的<code>ovsdb-server</code>中查询信息，操作的是数据库相关</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#列出主机上的所有databases，默认只有一个库Open_vSwitch</span></span><br><span class="line"><span class="string">ovsdb-client </span><span class="built_in">list-dbs</span></span><br><span class="line"><span class="built_in">#获取指定数据库的schema信息</span></span><br><span class="line"><span class="built_in">ovsdb-client</span> <span class="built_in">get-schema</span> [<span class="string">DATABASE]</span></span><br><span class="line"><span class="comment">#列出指定数据库的所有表</span></span><br><span class="line"><span class="string">ovsdb-client </span><span class="built_in">list-tables</span> [<span class="string">DATABASE]</span></span><br><span class="line"><span class="comment">#dump指定数据库所有数据,默认dump所有table数据，如果指定table，只dump指定table数据  </span></span><br><span class="line"><span class="string">ovsdb-client </span><span class="string">dump </span>[<span class="string">DATABASE]</span> [<span class="string">TABLE]</span></span><br><span class="line"><span class="comment">#监控指定数据库中的指定表记录改变  </span></span><br><span class="line"><span class="string">ovsdb-client </span><span class="string">monitor </span><span class="string">DATABASE </span><span class="string">TABLE</span></span><br></pre></td></tr></table></figure><p><strong>ovs-ofctl</strong></p><p><code>ovs-ofctl</code>是专门管理配置OpenFlow交换机的命令行工具，我们可以用它手动配置OVS中的OpenFlow flows，注意其不能操作datapath flows和”hidden” flows</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看br-tun中OpenFlow flows</span></span><br><span class="line">ovs-ofctl dump-flows br-tun</span><br><span class="line"><span class="comment">#查看br-tun端口信息   </span></span><br><span class="line">ovs-ofctl show br-tun</span><br><span class="line"><span class="comment">#添加新的flow：对于从端口p0进入交换机的数据包，如果它不包含任何VLAN tag，则自动为它添加VLAN tag 101</span></span><br><span class="line">ovs-ofctl<span class="built_in"> add-flow </span>br0 <span class="string">"priority=3,in_port=100,dl_vlan=0xffff,actions=mod_vlan_vid:101,normal"</span></span><br><span class="line"><span class="comment">#对于从端口3进入的数据包，若其vlan tag为100，去掉其vlan tag，并从端口1发出 </span></span><br><span class="line">ovs-ofctl<span class="built_in"> add-flow </span>br0 in_port=3,dl_vlan=101,actions=strip_vlan,output:1</span><br><span class="line"><span class="comment">#添加新的flow: 修改从端口p1收到的数据包的源地址为9.181.137.1,show 查看p1端口ID为100   </span></span><br><span class="line">ovs-ofctl<span class="built_in"> add-flow </span>br0 <span class="string">"priority=1 idle_timeout=0,in_port=100,actions=mod_nw_src:9.181.137.1,normal"</span></span><br><span class="line"><span class="comment">#添加新的flow: 重定向所有的ICMP数据包到端口 p2</span></span><br><span class="line">ovs-ofctl<span class="built_in"> add-flow </span>br0 idle_timeout=0,dl_type=0x0800,nw_proto=1,actions=output:102</span><br><span class="line"><span class="comment">#删除编号为 100 的端口上的所有流表项   </span></span><br><span class="line">ovs-ofctl del-flows br0 <span class="string">"in_port=100"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;OVS-网络架构&quot;&gt;&lt;a href=&quot;#OVS-网络架构&quot; class=&quot;headerlink&quot; title=&quot;OVS 网络架构&quot;&gt;&lt;/a&gt;OVS 网络架构&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2018/05/20/虚拟化/Openvswitch入门/网络架构.j
      
    
    </summary>
    
      <category term="虚拟化" scheme="http://www.yang-qiang.com/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
      <category term="openvswitch" scheme="http://www.yang-qiang.com/tags/openvswitch/"/>
    
      <category term="网络虚拟化" scheme="http://www.yang-qiang.com/tags/%E7%BD%91%E7%BB%9C%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>watch</title>
    <link href="http://www.yang-qiang.com/2018/05/13/linux%E5%91%BD%E4%BB%A4/watch/"/>
    <id>http://www.yang-qiang.com/2018/05/13/linux命令/watch/</id>
    <published>2018-05-13T13:24:28.000Z</published>
    <updated>2018-05-25T12:44:39.380Z</updated>
    
    <content type="html"><![CDATA[<p> watch是一个非常实用的命令，基本所有的Linux发行版都带有这个小工具，如同名字一样，watch可以帮你监测一个命令的运行结果，省得你一遍遍的手动运行。在Linux下，watch是周期性的执行下个程序，并全屏显示执行结果。你可以拿他来监测你想要的一切命令的结果变化，比如 tail 一个 log 文件，ls 监测某个文件的大小变化，看你的想象力了！</p><p> 1．命令格式：</p><p> watch[参数][命令]</p><p> 2．命令功能：</p><p> 可以将命令的输出结果输出到标准输出设备，多用于周期性执行命令/定时执行命令</p><p> 3．命令参数：</p><p> -n或–interval  watch缺省每2秒运行一下程序，可以用-n或-interval来指定间隔的时间。</p><p> -d或–differences  用-d或–differences 选项watch 会高亮显示变化的区域。 而-d=cumulative选项会把变动过的地方(不管最近的那次有没有变动)都高亮显示出来。</p><p> -t 或-no-title  会关闭watch命令在顶部的时间间隔,命令，当前时间的输出。</p><pre><code>-h, --help 查看帮助文档4．使用实例：实例1：命令：每隔一秒高亮显示网络链接数的变化情况watch -n 1 -d netstat -ant说明：其它操作：切换终端： Ctrl+x退出watch：Ctrl+g实例2：每隔一秒高亮显示http链接数的变化情况命令：watch -n 1 -d &apos;pstree|grep http&apos;说明：每隔一秒高亮显示http链接数的变化情况。 后面接的命令若带有管道符，需要加&apos;&apos;将命令区域归整。实例3：实时查看模拟攻击客户机建立起来的连接数命令：watch &apos;netstat -an | grep:21 | \ grep&lt;模拟攻击客户机的IP&gt;| wc -l&apos; </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; watch是一个非常实用的命令，基本所有的Linux发行版都带有这个小工具，如同名字一样，watch可以帮你监测一个命令的运行结果，省得你一遍遍的手动运行。在Linux下，watch是周期性的执行下个程序，并全屏显示执行结果。你可以拿他来监测你想要的一切命令的结果变化，比
      
    
    </summary>
    
      <category term="linux命令" scheme="http://www.yang-qiang.com/categories/linux%E5%91%BD%E4%BB%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>sysctl</title>
    <link href="http://www.yang-qiang.com/2018/05/12/linux%E5%91%BD%E4%BB%A4/sysctl/"/>
    <id>http://www.yang-qiang.com/2018/05/12/linux命令/sysctl/</id>
    <published>2018-05-12T13:47:26.000Z</published>
    <updated>2018-05-25T12:44:52.896Z</updated>
    
    <content type="html"><![CDATA[<p>sysctl命令被用于在内核运行时动态地修改内核的运行参数，可用的内核参数在目录/proc/sys中。<br>它包含一些TCP/ip堆栈和虚拟内存系统的高级选项， 这可以让有经验的管理员提高引人注目的系统性能。用sysctl可以读取设置超过五百个系统变量。 </p><p> 语法</p><p> sysctl(选项)(参数)</p><pre><code>选项-n：打印值时不打印关键字；-e：忽略未知关键字错误；-N：仅打印名称；-w：当改变sysctl设置时使用此项；-p：从配置文件“/etc/sysctl.conf”加载内核参数设置；-a：打印当前所有可用的内核参数变量和值；-A：以表格方式打印当前所有可用的内核参数变量和值。</code></pre><p>Linux sysctl命令用于设置系统核心参数。常见用法：</p><ol><li>列出系统全部核心参数并分屏显示：</li></ol><p>sysctl -a | more</p><p>核心设置都是文件（.代表子目录），存放在/proc/sys/目录下。</p><ol start="2"><li>临时修改系统核心参数（核心参数必须用完整字段）：</li></ol><p>sysctl -w net.ipv4.icmp_echo_ignore_all=”1”</p><p>对于x.y.m所在的路径为/proc/sys/x/y/m 。如net.ipv4.icmp_echo_ignore_all对应的文件为/proc/sys/net/ipv4/icmp_echo_ignore_all</p><p>注意：-w参数只对英文单词有效，对数字无效。</p><ol start="3"><li>永久修改系统核心参数（核心参数只用最后的字段）：</li></ol><p>echo “icmp_echo_ignore_all = 1” &gt;&gt; /etc/sysctl.conf</p><p>或者直接修改sysctl.conf配置文件：</p><p>vi /etc/sysctl.conf</p><ol start="4"><li>让修改后的系统配置文件生效：</li></ol><p>sysctl –p</p><p>如果仅仅是想临时改变某个系统参数的值,可以用两种方法来实现,例如想启用IP路由转发功能:</p><p>1) echo 1 &gt; /proc/sys/net/ipv4/ip_forward</p><p>2) sysctl -w net.ipv4.ip_forward=1以上两种方法都可能立即开启路由功能,但如果系统重启,或执行了 service network restart命令,所设置的值即会丢失,如果想永久保留配置,可以修改/etc/sysctl.conf文件将 net.ipv4.ip_forward=0改为net.ipv4.ip_forward=1</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;sysctl命令被用于在内核运行时动态地修改内核的运行参数，可用的内核参数在目录/proc/sys中。&lt;br&gt;它包含一些TCP/ip堆栈和虚拟内存系统的高级选项， 这可以让有经验的管理员提高引人注目的系统性能。用sysctl可以读取设置超过五百个系统变量。 &lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="linux命令" scheme="http://www.yang-qiang.com/categories/linux%E5%91%BD%E4%BB%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>git入门</title>
    <link href="http://www.yang-qiang.com/2018/04/28/git/git%E5%85%A5%E9%97%A8/"/>
    <id>http://www.yang-qiang.com/2018/04/28/git/git入门/</id>
    <published>2018-04-28T12:50:43.000Z</published>
    <updated>2018-05-25T12:58:16.275Z</updated>
    
    <content type="html"><![CDATA[<h1 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h1><p>若是条件允许，从源代码安装有很多好处，至少可以安装最新的版本。Git  的每个版本都在不断尝试改进用户体验，所以能通过源代码自己编译安装最新版本就再好不过了。有些 Linux  版本自带的安装包更新起来并不及时，所以除非你在用最新的 distro 或者 backports，那么从源代码安装其实该算是最佳选择。</p><p>Git  的工作需要调用 curl，zlib，openssl，expat，libiconv 等库的代码，所以需要先安装这些依赖工具。在有 yum  的系统上（比如 Fedora）或者有 apt-get 的系统上（比如 Debian 体系），可以用下面的命令安装：</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br><span class="line">$ apt-<span class="built_in">get</span> install libcurl4-gnutls-<span class="built_in">dev</span> libexpat1-<span class="built_in">dev</span> gettext libz-<span class="built_in">dev</span> libssl-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure><p>然后编译并安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tar -zxf git-2.12.3.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> git-2.12.3</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make prefix=/usr/<span class="built_in">local</span> all</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo make prefix=/usr/<span class="built_in">local</span> install</span></span><br></pre></td></tr></table></figure><p>如果要在 Linux 上安装预编译好的 Git 二进制安装包，可以直接用系统提供的包管理工具。在 Fedora 上用 yum 安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install git-core</span></span><br></pre></td></tr></table></figure><p>在 Ubuntu 这类 Debian 体系的系统上，可以用 apt-get 安装：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-<span class="builtin-name">get</span> install git</span><br></pre></td></tr></table></figure><h1 id="初次运行-Git-前的配置"><a href="#初次运行-Git-前的配置" class="headerlink" title="初次运行 Git 前的配置"></a>初次运行 Git 前的配置</h1><p>Linux系统下使用终端进行配置就可以了。</p><p>在Windows系统下建议使用git-bash工具，正常情况下安装玩git后点击鼠标右键，在菜单中有一个git bash here选项，点击该选项就可以使用git-bash了。</p><p>一般在新的系统上，我们都需要先配置下自己的 Git 工作环境。配置工作只需一次，以后升级时还会沿用现在的配置。当然，如果需要，你随时可以用相同的命令修改已有的配置。</p><p>Git 提供了一个叫做 <code>git config</code> 的工具（译注：实际是 <code>git-config</code> 命令，只不过可以通过 <code>git</code> 加一个名字来呼叫此命令。），专门用来配置或读取相应的工作环境变量。而正是由这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：</p><ul><li><code>/etc/gitconfig</code> 文件：系统中对所有用户都普遍适用的配置。若使用 <code>git config</code> 时用 <code>--system</code> 选项，读写的就是这个文件。</li><li><code>~/.gitconfig</code> 文件：用户目录下的配置文件只适用于该用户。若使用 <code>git config</code> 时用 <code>--global</code> 选项，读写的就是这个文件。</li><li>当前项目的 Git 目录中的配置文件（也就是工作目录中的 <code>.git/config</code> 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 <code>.git/config</code> 里的配置会覆盖 <code>/etc/gitconfig</code> 中的同名变量。</li></ul><p>在 Windows 系统上，Git 会找寻用户主目录下的 <code>.gitconfig</code> 文件。主目录即 <code>$HOME</code> 变量指定的目录，一般都是 <code>C:\Documents and Settings\$USER</code>。此外，Git 还会尝试找寻 <code>/etc/gitconfig</code> 文件，只不过看当初 Git 装在什么目录，就以此作为根目录来定位。</p><h2 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h2><p>第一个要配置的是你个人的用户名称和电子邮件地址。这两条配置很重要，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git<span class="built_in"> config </span>--global user.name <span class="string">"John Doe"</span></span><br><span class="line">$ git<span class="built_in"> config </span>--global user.email johndoe@example.com</span><br></pre></td></tr></table></figure><p>如果用了 <code>--global</code> 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 <code>--global</code> 选项重新配置即可，新的设定保存在当前项目的 <code>.git/config</code> 文件里。</p><h2 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h2><p>接下来要设置的是默认使用的文本编辑器。Git 需要你输入一些额外消息的时候，会自动调用一个外部文本编辑器给你用。默认会使用操作系统指定的默认编辑器，一般可能会是 Vi 或者 Vim。如果你有其他偏好，比如 Emacs 的话，可以重新设置：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git<span class="built_in"> config </span>--global core.editor emacs</span><br></pre></td></tr></table></figure><h2 id="差异分析工具"><a href="#差异分析工具" class="headerlink" title="差异分析工具"></a>差异分析工具</h2><p>还有一个比较常用的是，在解决合并冲突时使用哪种差异分析工具。比如要改用 vimdiff 的话：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git<span class="built_in"> config </span>--global merge.tool vimdiff</span><br></pre></td></tr></table></figure><p>Git 可以理解 kdiff3，tkdiff，meld，xxdiff，emerge，vimdiff，gvimdiff，ecmerge，和 opendiff 等合并工具的输出信息。当然，你也可以指定使用自己开发的工具，具体怎么做可以参阅第七章。</p><h2 id="查看配置信息"><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h2><p>要检查已有的配置信息，可以使用 <code>git config --list</code> 命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git<span class="built_in"> config </span>--list</span><br><span class="line">user.<span class="attribute">name</span>=Scott Chacon</span><br><span class="line">user.<span class="attribute">email</span>=schacon@gmail.com</span><br><span class="line">color.<span class="attribute">status</span>=auto</span><br><span class="line">color.<span class="attribute">branch</span>=auto</span><br><span class="line">color.<span class="attribute">interactive</span>=auto</span><br><span class="line">color.<span class="attribute">diff</span>=auto</span><br><span class="line"><span class="built_in">..</span>.</span><br></pre></td></tr></table></figure><p>有时候会看到重复的变量名，那就说明它们来自不同的配置文件（比如 <code>/etc/gitconfig</code> 和 <code>~/.gitconfig</code>），不过最终 Git 实际采用的是最后一个。</p><p>也可以直接查阅某个环境变量的设定，只要把特定的名字跟在后面即可，像这样：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git<span class="built_in"> config </span>user.name</span><br></pre></td></tr></table></figure><h1 id="使用GitHub的前期准备工作"><a href="#使用GitHub的前期准备工作" class="headerlink" title="使用GitHub的前期准备工作"></a>使用GitHub的前期准备工作</h1><p>1.创建GitHub帐号：登陆git主页： <a href="https://github.com/，自己注册一个账号" target="_blank" rel="noopener">https://github.com/，自己注册一个账号</a></p><p>2.生成ssh key</p><p>Linux系统下，终端使用命令<br>ssh-keygen -t rsa -C “your_email@<a href="http://youremail.com" target="_blank" rel="noopener">youremail.com</a>“  </p><p>连续按enter键，直到结束，这样设置的密码就为空了，并且创建了key<br>正常情况下，在~/.ssh目录下会生成一个id_rsa.pub文件（.ssh是隐藏文件夹，需要设置显示隐藏文件夹），复制id_rsa.pub文件的内容。</p><p>Windows系统下，在git-bash中执行依次执行命令：</p><p>cd ~/.ssh/ （如果提示 “ No such file or directory”，你可以手动的创建一个 .ssh文件夹即可，命令为：mkdir ~/.ssh）<br>ssh-keygen -t rsa -C “your_email@<a href="http://youremail.com" target="_blank" rel="noopener">youremail.com</a>“  连续按enter键，直到结束，这样设置的密码就为空了，并且创建了key。</p><p>进入~/.ssh文件夹，用记事本打开id_rsa.pub，复制文件的内容</p><p>3.回到github，进入Account Settings，左边选择SSH Keys，Add SSH Key，title随便填，粘贴key。</p><p>4.测试ssh key是否成功：使用命令<br>ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a> </p><p>如果出现You’ve successfully authenticated, but GitHub does not provide shell access 。</p><p>这就表示已成功连上github。如果出现“Agent admitted failure to sign using the key.Permission denied (publickey).”这个错误的话，在命令行下</p><p>执行  </p><p>ssh -add  </p><p>这样就可以了。</p><p>5.配置Git的全局配置文件，username和email(如果之前没有进行配置)：<br>git config –global <a href="http://user.name" target="_blank" rel="noopener">user.name</a> “your name”   //github账户名<br>git config –global user.email “your email”    //注册GitHub时使用的email<br>或者(单独项目)<br>git config <a href="http://user.name" target="_blank" rel="noopener">user.name</a> “your name”<br>git config user.email “your email”  </p><p>6.在Git上添加一个Repository</p><p>使用github的前期准备工作完成</p><h1 id="工作区与版本库"><a href="#工作区与版本库" class="headerlink" title="工作区与版本库"></a>工作区与版本库</h1><h2 id="工作区（Working-Directory）"><a href="#工作区（Working-Directory）" class="headerlink" title="工作区（Working Directory）"></a>工作区（Working Directory）</h2><p>就是你在电脑里能看到的目录</p><h2 id="版本库（Repository）"><a href="#版本库（Repository）" class="headerlink" title="版本库（Repository）"></a>版本库（Repository）</h2><p>工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库。Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区。暂存区域是一个文件，保存了下次将提交的文件列表信息，有时候也被称作<code>‘索引’&#39;，不过一般说法还是叫暂存区域。还有Git为我们自动创建的第一个分支</code>master<code>，以及指向</code>master<code>的一个指针叫</code>HEAD。`</p><p>我们把文件往Git版本库里添加的时候，是分两步执行的：</p><p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</p><p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支</p><p>下面这个图展示了工作区、版本库中的暂存区和版本库之间的关系：</p><h1 id="git命令总结"><a href="#git命令总结" class="headerlink" title="git命令总结"></a>git命令总结</h1><ul><li><h2 id="配置全局用户及邮箱"><a href="#配置全局用户及邮箱" class="headerlink" title="配置全局用户及邮箱"></a>配置全局用户及邮箱</h2></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--global user.name <span class="string">"Your Name"</span></span><br><span class="line"></span><br><span class="line">git<span class="built_in"> config </span>--global user.email <span class="string">"email@example.com"</span></span><br></pre></td></tr></table></figure><ul><li><h2 id="配置当前仓库用户及邮箱"><a href="#配置当前仓库用户及邮箱" class="headerlink" title="配置当前仓库用户及邮箱"></a>配置当前仓库用户及邮箱</h2></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>user.name <span class="string">"Your Name"</span></span><br><span class="line"></span><br><span class="line">git<span class="built_in"> config </span>user.email <span class="string">"email@xx.com"</span></span><br></pre></td></tr></table></figure><ul><li><h2 id="查看配置文件内容"><a href="#查看配置文件内容" class="headerlink" title="查看配置文件内容"></a>查看配置文件内容</h2></li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git<span class="built_in"> config </span>--list</span><br></pre></td></tr></table></figure><ul><li><h2 id="初始化版本库"><a href="#初始化版本库" class="headerlink" title="初始化版本库"></a>初始化版本库</h2></li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git init</span></span><br></pre></td></tr></table></figure><p>如果使用的是Windows下的git，最好不要有中文路径，否则有可能出错。</p><ul><li><h2 id="把文件放到-git-仓库"><a href="#把文件放到-git-仓库" class="headerlink" title="把文件放到 git 仓库"></a>把文件放到 git 仓库</h2></li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">add</span><span class="bash"></span></span><br></pre></td></tr></table></figure><ul><li><h2 id="把文件提交到-git-仓库"><a href="#把文件提交到-git-仓库" class="headerlink" title="把文件提交到 git 仓库"></a>把文件提交到 git 仓库</h2></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git</span> commit -m <span class="string">"xxx"</span></span><br></pre></td></tr></table></figure><ul><li><h2 id="提交本地工作目录下所有修改，而不需要先-git-add-相当于：git-add-和-git-commit"><a href="#提交本地工作目录下所有修改，而不需要先-git-add-相当于：git-add-和-git-commit" class="headerlink" title="提交本地工作目录下所有修改，而不需要先 git add,相当于：git add 和 git commit"></a>提交本地工作目录下所有修改，而不需要先 git add,相当于：git add 和 git commit</h2></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git</span> commit -am<span class="string">"message"</span></span><br></pre></td></tr></table></figure><ul><li><h2 id="查看当前仓库状态"><a href="#查看当前仓库状态" class="headerlink" title="查看当前仓库状态"></a>查看当前仓库状态</h2></li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git status</span></span><br></pre></td></tr></table></figure><ul><li><h2 id="查看文件修改"><a href="#查看文件修改" class="headerlink" title="查看文件修改"></a>查看文件修改</h2></li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;<span class="built_in">file</span>&gt;</span><br></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">diff </span>   <span class="comment">#是工作区(work dict)和暂存区(stage)的比较</span></span><br><span class="line">git <span class="keyword">diff </span>--<span class="keyword">cached </span>   <span class="comment">#是暂存区(stage)和分支(master)的比较</span></span><br><span class="line">git <span class="keyword">diff </span>HEAD  <span class="comment">#查看工作区和版本库里面最新版本的区别</span></span><br></pre></td></tr></table></figure><ul><li><h2 id="查看提交日志"><a href="#查看提交日志" class="headerlink" title="查看提交日志"></a>查看提交日志</h2></li></ul><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br><span class="line">git <span class="built_in">log</span> <span class="comment">--pretty=oneline</span></span><br></pre></td></tr></table></figure><ul><li><h2 id="版本回退到上一个版本"><a href="#版本回退到上一个版本" class="headerlink" title="版本回退到上一个版本"></a>版本回退到上一个版本</h2></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">reset</span> <span class="comment">--hard HEAD^</span></span><br><span class="line">git <span class="keyword">reset</span> <span class="comment">--hard 3628164</span></span><br></pre></td></tr></table></figure><ul><li><h2 id="查看命令日志"><a href="#查看命令日志" class="headerlink" title="查看命令日志"></a>查看命令日志</h2></li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git reflog</span></span><br></pre></td></tr></table></figure><ul><li><h2 id="丢弃工作区修改"><a href="#丢弃工作区修改" class="headerlink" title="丢弃工作区修改"></a>丢弃工作区修改</h2></li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="comment">-- file</span></span><br></pre></td></tr></table></figure><ul><li><h2 id="撤销暂存区修改"><a href="#撤销暂存区修改" class="headerlink" title="撤销暂存区修改"></a>撤销暂存区修改</h2></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">reset</span> <span class="keyword">HEAD</span> <span class="keyword">file</span></span><br></pre></td></tr></table></figure><ul><li><h2 id="删除暂存区文件"><a href="#删除暂存区文件" class="headerlink" title="删除暂存区文件"></a>删除暂存区文件</h2></li></ul><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">rm</span> &lt;<span class="keyword">file</span>&gt;</span><br><span class="line">git commit -<span class="keyword">m</span> <span class="string">"xxxx"</span></span><br></pre></td></tr></table></figure><ul><li><h2 id="从暂存区恢复删除文件"><a href="#从暂存区恢复删除文件" class="headerlink" title="从暂存区恢复删除文件"></a>从暂存区恢复删除文件</h2></li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout <span class="comment">--&lt;file&gt;</span></span><br></pre></td></tr></table></figure><ul><li><h2 id="关联远程仓库"><a href="#关联远程仓库" class="headerlink" title="关联远程仓库"></a>关联远程仓库</h2></li></ul><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@server-<span class="keyword">name</span>:<span class="built_in">path</span>/repo-<span class="keyword">name</span>.git</span><br></pre></td></tr></table></figure><ul><li><h2 id="首次-push-到远程仓库"><a href="#首次-push-到远程仓库" class="headerlink" title="首次 push 到远程仓库"></a>首次 push 到远程仓库</h2></li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> -u <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure><ul><li><h2 id="非首次推送到远程仓库"><a href="#非首次推送到远程仓库" class="headerlink" title="非首次推送到远程仓库"></a>非首次推送到远程仓库</h2></li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure><ul><li><h2 id="从远程仓库克隆"><a href="#从远程仓库克隆" class="headerlink" title="从远程仓库克隆"></a>从远程仓库克隆</h2></li></ul><p><code>git clone git@server-name:path/repo-name.git</code></p><ul><li><h2 id="从远程仓库抓取数据"><a href="#从远程仓库抓取数据" class="headerlink" title="从远程仓库抓取数据"></a><code>从远程仓库抓取数据</code></h2></li></ul><p><code>git fetch [remote-name]</code></p><ul><li><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2></li></ul><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">查看分支：git branch</span><br><span class="line">创建分支：git branch &lt;<span class="keyword">name</span>&gt;</span><br><span class="line">切换分支：git checkout &lt;<span class="keyword">name</span>&gt;</span><br><span class="line">创建+切换分支：git checkout -b &lt;<span class="keyword">name</span>&gt;</span><br><span class="line">合并某分支到当前分支：git <span class="built_in">merge</span> &lt;<span class="keyword">name</span>&gt;</span><br><span class="line">删除分支：git branch -d &lt;<span class="keyword">name</span>&gt;</span><br></pre></td></tr></table></figure><ul><li><h2 id="禁止使用-fast-forward-merge-方式"><a href="#禁止使用-fast-forward-merge-方式" class="headerlink" title="禁止使用 fast forward merge 方式"></a>禁止使用 fast forward merge 方式</h2></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">git</span> merge --<span class="literal">no</span>-ff -m <span class="string">"xxx"</span>  &lt;branch name&gt;</span><br></pre></td></tr></table></figure><ul><li><h2 id="隐藏现场及恢复现场"><a href="#隐藏现场及恢复现场" class="headerlink" title="隐藏现场及恢复现场"></a>隐藏现场及恢复现场</h2></li></ul><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git stash <span class="meta">#保存现场</span></span><br><span class="line">git stash <span class="keyword">pop</span> <span class="meta">#恢复现场</span></span><br></pre></td></tr></table></figure><ul><li><h2 id="强制删除未合并分支"><a href="#强制删除未合并分支" class="headerlink" title="强制删除未合并分支"></a>强制删除未合并分支</h2></li></ul><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">git</span> <span class="keyword">branch </span>-D &lt;<span class="keyword">branch </span>name&gt;</span><br></pre></td></tr></table></figure><ul><li><h2 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h2></li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="comment">#查看远程库信息</span></span><br><span class="line">git remote -v <span class="comment">#查看远程库信息详细</span></span><br><span class="line">git push <span class="keyword">origin </span>master <span class="comment">#推送本地 master 分支</span></span><br><span class="line">git checkout -<span class="keyword">b </span>dev <span class="keyword">origin/dev </span><span class="comment">#创建本地 dev 并关联远程 dev 分支</span></span><br><span class="line">git <span class="keyword">branch </span>--set-upstream <span class="keyword">branch-name </span><span class="keyword">origin/branch-name </span><span class="comment">#建立本地分支与远程分支得关联</span></span><br><span class="line">git pull <span class="comment">#抓取远程分支</span></span><br></pre></td></tr></table></figure><ul><li><h2 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h2></li></ul><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">tag</span> <span class="title">&lt;name</span>&gt;  <span class="comment">#创建标签</span></span><br><span class="line">git <span class="keyword">tag</span> <span class="title">#查看所有标签</span></span><br><span class="line"><span class="title">git</span> <span class="keyword">tag</span> <span class="title">v0</span>.<span class="number">9</span> <span class="number">6224937</span> <span class="comment">#对某一次 commit 打标签</span></span><br><span class="line">git show <span class="tag">&lt;tagname&gt;</span> <span class="comment">#查看标签信息</span></span><br><span class="line">git <span class="keyword">tag</span> <span class="title">-a</span> v0.<span class="number">1</span> -m <span class="string">"version 0.1 released"</span> <span class="number">3628164</span> <span class="comment">#创建有说明的标签</span></span><br></pre></td></tr></table></figure><ul><li><h2 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h2></li></ul><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git tag -d v<span class="number">0</span>.<span class="number">1</span> <span class="comment">#删除标签</span></span><br><span class="line">git push origin &lt;tagname&gt; <span class="comment">#推送标签到远程</span></span><br><span class="line">git push origin --tags <span class="comment">#推送本地所有未推送到远程的标签</span></span><br><span class="line">git push origin <span class="symbol">:refs/tags/&lt;tagname&gt;</span> <span class="comment">#删除远程标签</span></span><br></pre></td></tr></table></figure><ul><li><h2 id="自定义git"><a href="#自定义git" class="headerlink" title="自定义git"></a>自定义git</h2></li></ul><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> color<span class="variable">.ui</span> true #配置颜色开启</span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> <span class="keyword">alias</span><span class="variable">.st</span> status</span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> <span class="keyword">alias</span><span class="variable">.co</span> checkout</span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> <span class="keyword">alias</span><span class="variable">.ci</span> commit</span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> <span class="keyword">alias</span><span class="variable">.br</span> branch</span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> <span class="keyword">alias</span><span class="variable">.unstage</span> 'reset HEAD'</span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> <span class="keyword">alias</span><span class="variable">.last</span> 'log -<span class="number">1</span>'</span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> <span class="keyword">alias</span><span class="variable">.lg</span> <span class="string">"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"</span></span><br><span class="line">git <span class="keyword">config</span> --<span class="keyword">global</span> core<span class="variable">.quotepath</span> false # 设置显示中文文件名</span><br></pre></td></tr></table></figure><h1 id="常用命令图示"><a href="#常用命令图示" class="headerlink" title="常用命令图示"></a>常用命令图示</h1><p><img src="/2018/04/28/git/git入门/常用命令图示.jpg" alt="常用命令图示"></p><h1 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h1><p>把当前版本回退到上一个版本，使用<code>git reset --hard HEAD^(用HEAD表示当前版本，，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100)，然后用git log再看看现在版本库的状态，回退前最新的那个版本已经看不到了，想重新回到回退前最新的版本，办法其实还是有的，只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那个回退前最新的版本的commit_id，使用命令git reset --hard commit_id，于是就可以指定回到未来的某个版本。</code></p><p>如果回退到了某个版本，关掉了电脑，在某个时候后悔了，想恢复到新版本怎么办？找不到新版本的<code>commit_id</code>怎么办？</p><p>在Git中，总是有后悔药可以吃的<code>，</code>git提供了一个命令<code>git reflog</code>用来记录你的每一次命令，比如</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog</span><br><span class="line">ea34578 HEAD@&#123;<span class="number">0</span>&#125;: rese<span class="variable">t:</span> moving <span class="keyword">to</span> HEAD^</span><br><span class="line"><span class="number">3628164</span> HEAD@&#123;<span class="number">1</span>&#125;: commi<span class="variable">t:</span> <span class="keyword">append</span> GPL</span><br><span class="line">ea34578 HEAD@&#123;<span class="number">2</span>&#125;: commi<span class="variable">t:</span> <span class="built_in">add</span> distributed</span><br><span class="line">cb926e7 HEAD@&#123;<span class="number">3</span>&#125;: commit (initial): wrote <span class="keyword">a</span> readme <span class="keyword">file</span></span><br></pre></td></tr></table></figure><p>第二行显示<code>append GPL</code>的commit id是<code>3628164，使用git reset --hard 3628164 能恢复到append GPL了，</code></p><p>以上方法，当版本回退时，所有文件都进行回退，只将单个文件回退，参考地址：<a href="http://blog.csdn.net/b_h_l/article/details/17266849" target="_blank" rel="noopener">http://blog.csdn.net/b_h_l/article/details/17266849</a><br>$ git log file<br>$ git reset commit_id file    #版本库回退到某个历史版本，但工作区没有回退。这个命令清空add命令向暂存区提交的关于file文件的修改（Ustage），并不改变工作区，这意味着在无任何其他操作的情况下，工作区中的实际文件同该命令运行之前无任何变化<br>$ git checkout file              #同步到工作区</p><h1 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a><strong>撤销修改</strong></h1><p>场景1：当你改乱了工作区某个文件的内容，改乱后还没有添加到暂存区，想直接丢弃工作区的修改时，用命令 git checkout – file。</p><p>场景2：当你不但改乱了工作区某个文件的内容，还把改乱后文件添加到了暂存区时，想丢弃修改，分两步，第一步用命令 git reset HEAD file，就回到了场景1，第二步按场景1操作。</p><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，使用版本回退命令，如果推送到远程库，重新push时使用<code>git push --force</code>。但是版本回退有可能导致别人在同一个分支上修改</p><p>场景4：取消暂存的文件， 例如，你已经修改了两个文件并且想要将它们作为两次独立的修改提交，但是却意外地输入了 git add * 暂存了它们两个，使用 git reset HEAD file 来取消暂存某个文件</p><h1 id="忽略特殊文件"><a href="#忽略特殊文件" class="headerlink" title="忽略特殊文件"></a><strong>忽略特殊文件</strong></h1><p>我们在使用 Git 进行版本控制的时候，有些文件是无需纳入 Git 管理的，通常都是些自动生成的文件，像日志或者编译过程中创建的文件。我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件来解决这个问题。 此外推荐一个<strong>自动生成 .gitignore 文件</strong>的网址：<a href="http://www.gitignore.io/" target="_blank" rel="noopener">http://www.gitignore.io/</a></p><h1 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a><strong>删除文件</strong></h1><p>把工作区某个文件删除之后，git知道你删除了文件，因此，工作区和版本库就不一致了，<code>git status</code>命令会立刻告诉你哪些文件被删除了，现在有两个选择，一是确实要从版本库中删除该文件，那就</p><p>使用命令</p><p><code>git rm filename</code></p><p><code>`</code>git commit -m “你要添加的消息”`</p><p>现在，文件就从版本库中被删除了，</p><p>另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：</p><p><code>git checkout -- filename如果工作区的文件没有被删除而直接使用 git rm filename,则会先删除本地文件，然后删除暂存区的文件。</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;git安装&quot;&gt;&lt;a href=&quot;#git安装&quot; class=&quot;headerlink&quot; title=&quot;git安装&quot;&gt;&lt;/a&gt;git安装&lt;/h1&gt;&lt;p&gt;若是条件允许，从源代码安装有很多好处，至少可以安装最新的版本。Git  的每个版本都在不断尝试改进用户体验，所以能通
      
    
    </summary>
    
      <category term="git" scheme="http://www.yang-qiang.com/categories/git/"/>
    
    
      <category term="git" scheme="http://www.yang-qiang.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Linux下如何避免从删库到跑路的悲剧</title>
    <link href="http://www.yang-qiang.com/2018/04/01/linux/Linux%E4%B8%8B%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E4%BB%8E%E5%88%A0%E5%BA%93%E5%88%B0%E8%B7%91%E8%B7%AF%E7%9A%84%E6%82%B2%E5%89%A7/"/>
    <id>http://www.yang-qiang.com/2018/04/01/linux/Linux下如何避免从删库到跑路的悲剧/</id>
    <published>2018-04-01T13:24:16.000Z</published>
    <updated>2018-05-25T13:29:58.624Z</updated>
    
    <content type="html"><![CDATA[<p>Linux 下有些指令非常重要，或者说非常危险，rm 就是其中之一，无论跟什么参数，需要的是谨慎的操作，尤其是拥有root权限的时候。</p><p>以 rm -rf ~这个非常危险的操作为例:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rm -rf ~</span><br><span class="line">rm: cannot <span class="built_in">remove</span> `/<span class="built_in">home</span>/user<span class="string">': Permission denied</span></span><br></pre></td></tr></table></figure><p>此时虽然会提示错误，但当前用户家目录下，所有的文件均已被删除，只是因为权限不能删除/home/user，如果此时用的 root，此时可以执行。</p><p>因此可以任意执行指令 rm，是非常危险的一件事情，极有可能让你误操作，甚至未反应过来，有什么方法可以避免？</p><p>一个是要建立这种意识，就是执行这种特殊指令前，不要急于回车，静下来一两秒，再做操作，但说起来容易，做起来难，不是一朝一夕，就能建立。</p><p>另一个是可以通过技术手段，降低执行 rm 的误操作程度，网上有不少方法，其中一种方法，就是建立类似回收站机制。</p><p><strong>1. 用户家目录下，建立隐藏文件夹.trash：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir .trash</span></span><br></pre></td></tr></table></figure><p><strong>2. 创建 remove.sh 脚本，实现逻辑简单：</strong></p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ vi remove.sh</span><br><span class="line"><span class="comment">//定义文件夹目录.trash</span></span><br><span class="line">TRASH_DIR=<span class="string">"/home/user/.trash"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $*; <span class="keyword">do</span></span><br><span class="line">    <span class="comment">//定义秒时间戳</span></span><br><span class="line">    STAMP=<span class="string">`date +%s`</span></span><br><span class="line">    <span class="comment">//得到文件名称(非文件夹)，参考man basename</span></span><br><span class="line">    fileName=<span class="string">`basename $i`</span></span><br><span class="line">    <span class="comment">//将输入的参数，对应文件mv至.trash目录，文件后缀，为当前的时间戳</span></span><br><span class="line">    mv $i $TRASH_DIR/$fileName.$STAMP</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p><strong>3. 修改.bashrc，增加一行：</strong></p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># User specific <span class="built_in">aliases</span> <span class="keyword">and</span> <span class="built_in">functions</span></span><br><span class="line"><span class="built_in">alias</span> rm=<span class="string">"sh /home/user/tool/remove.sh"</span></span><br></pre></td></tr></table></figure><p>即设置一个 rm 同名 alias。</p><p><strong>4. 此时执行 rm：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rm 1</span></span><br></pre></td></tr></table></figure><p>进入隐藏文件夹：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> .trash</span></span><br></pre></td></tr></table></figure><p>检索当前路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">1.1517500702</span><br></pre></td></tr></table></figure><p>其实执行 rm 1，只是将文件 1 执行 mv，存储于隐藏目录.trash，并用时间戳改名，需要的时候可以直接恢复，实现回收站机制。</p><p><strong>5. 当然目录.trash，需要控制容量</strong>，一种方法，是可以写个定时任务，要是智能一些，就可以判断文件夹的容量，超过阈值，就执行清理操作，要是粗暴一些，可以每日定时执行清理，例如：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">0 </span><span class="number">0</span> * * * rm -rf /home/user/.trash/*</span><br></pre></td></tr></table></figure><p>每日 00:00 定时执行，清空隐藏目录.trash。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Linux 下有些指令非常重要，或者说非常危险，rm 就是其中之一，无论跟什么参数，需要的是谨慎的操作，尤其是拥有root权限的时候。&lt;/p&gt;
&lt;p&gt;以 rm -rf ~这个非常危险的操作为例:&lt;/p&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Linux" scheme="http://www.yang-qiang.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>虚拟化入门</title>
    <link href="http://www.yang-qiang.com/2018/02/03/%E8%99%9A%E6%8B%9F%E5%8C%96/%E8%99%9A%E6%8B%9F%E5%8C%96%E5%85%A5%E9%97%A8/"/>
    <id>http://www.yang-qiang.com/2018/02/03/虚拟化/虚拟化入门/</id>
    <published>2018-02-03T13:00:15.000Z</published>
    <updated>2018-06-07T14:27:31.511Z</updated>
    
    <content type="html"><![CDATA[<h1 id="虚拟化技术分类"><a href="#虚拟化技术分类" class="headerlink" title="虚拟化技术分类"></a>虚拟化技术分类</h1><h2 id="全虚拟化："><a href="#全虚拟化：" class="headerlink" title="全虚拟化："></a>全虚拟化：</h2><p>Hypervisor/VMM完全通过软件模拟硬件接口的功能，guest os无需进行修改就能直接访问虚拟硬件</p><p>举例：VMware</p><p>​    在全虚拟化情况下，虚拟机并不知道自己运行在虚拟化环境下，是无感知的，安装使用时跟在物理机上没有什么区别。但是这种完全虚拟化中间需要软件做支撑的，需要软件去模拟提供所有的硬件资源，至少是这个CPU的特权指令需要用软件去模拟的，因为你要让各Guest并不知道自己运行在虚拟环境中，那么你就必须要提供一个带有特权指令的CPU。</p><p>​    在虚拟化环境中，通常虚拟跟模拟是两个概念，VMWare的动态二进制翻译技术（BT）是虚拟的而QEMU软件技术是模拟的。最大的区别在于，模拟通过软件实现时需要模拟CPU ring 0-3，也就是需要转换CPU ring 0-3所有的指令，而虚拟只需要转换CPU ring 0特权指令即可。</p><p>​    在全虚拟化情况下，虚拟机并不知道自己运行在虚拟化环境下，是无感知的，安装使用时跟在物理机上没有什么区别。但是这种完全虚拟化中间需要软件做支撑的，需要软件去模拟提供所有的硬件资源，至少是这个CPU的特权指令需要用软件去模拟的，因为你要让各Guest并不知道自己运行在虚拟环境中，那么你就必须要提供一个带有特权指令的CPU。</p><p>​    在虚拟化环境中，通常虚拟跟模拟是两个概念，VMWare的动态二进制翻译技术（BT）是虚拟的而QEMU软件技术是模拟的。最大的区别在于，模拟通过软件实现时需要模拟CPU ring 0-3，也就是需要转换CPU ring 0-3所有的指令，而虚拟只需要转换CPU ring 0特权指令即可。</p><h2 id="半虚拟化："><a href="#半虚拟化：" class="headerlink" title="半虚拟化："></a>半虚拟化：</h2><p>虚拟机内核明确知道自己是运行在虚拟化之上的，对于硬件资源的使用不再需要BT而是自己向VMM申请使用，如对于内存或CPU的使用是直接向VMM申请使用，直接调用而非翻译。就算对于I/O设备的使用它也可以通过Hyper Call（Hypervisor提供的系统调用）直接可以跟硬件打交道，减少了中间的翻译步骤自然性能就好了，据说这种半虚拟化方式能够让虚拟化达到物理机90%的性能。本质上，半虚拟化弱化了对虚拟机特殊指令的被动截获要求，将其转化成客户机操作系统的主动通知。但是，半虚拟化需要修改客户机操作系统的源代码来实现主动通知。个人认为全虚拟化与版虚拟化的区别就是虚拟机知不知道自己运行在虚拟化环境下。</p><h2 id="CPU硬件辅助虚拟化"><a href="#CPU硬件辅助虚拟化" class="headerlink" title="CPU硬件辅助虚拟化"></a>CPU硬件辅助虚拟化</h2><p><img src="/2018/02/03/虚拟化/虚拟化入门/CPU硬件辅助虚拟化方案.png" alt="CPU硬件辅助虚拟化方案"></p><p>​    支持虚拟化的处理器其虚拟化相关的操作被称为VMX operation 。它分为两类：VMX root operation 和 VMX non-root operation 。通常来说，VMM 运行于 VMX root operation 而 guest 运行于 VMX non-root operation 。两种operation之间的转换被称为VMX transitions：从root到non-root被称为VM entries，而从non-root到root则称为VM exits。</p><p>​    处于VMX root operation的CPU其行为与在VMX operation之外是基本一样的，最根本的不同之处在于其增加了一套新的VMX指令集，且能存储到特定控制寄存器的值是有限的。而处于VMX non-root operation的CPU起行为是受限的，且经过了修改以帮助实现virtualization。与其普通的operation不同，特定的指令（包括新增的VMCALL指令）和事件将导致VM exits从而进入VMM：由于这些VM exits代替了以前正常的行为，所以在VMX non-root operation中的软件的功能是受限的（也正是这种限制保证了VMM能够始终具有控制处理器资源的能力）。</p><p>​    从guest的角度，没有任何一个Guest可见的位来指示一个逻辑处理器是否处于VMX non-root operation，这样VMX就能保证guest并不知道其正在运行于一个VM中。即便是CPL(current privilege level)为0，VMX operation也给guest加了限制，这样guest software就可以完全不必改变其原始的设计，这也简化了VMM的开发。</p><p>现在就可以看一下VMM与Guest之间的交互了。大体的流程是这样子的：</p><ol><li>software执行VMXON指令进入VMX operation</li><li>通过VM entries，VMM就可以进入VM的guest中（VMM通过VMLANCH和VMRESUME来触发VM entry，并通过VM exits重新获得控制权）</li><li>VM exits将控制权转移到由VMM定义的entry point（VMM可以采取适当的动作来触发VM exit，然后再使用一个VM entry就可以返回到VM中）。</li><li>最后，VMM通过VMXOFF指令关闭自身并退出VMX operation</li></ol><h1 id="内存虚拟化"><a href="#内存虚拟化" class="headerlink" title="内存虚拟化"></a>内存虚拟化</h1><p>虚拟化的实现主要指三个方面，cpu，内存，io。</p><p>为了实现内存虚拟化，让客户机使用一个隔离的、从零开始且具有连续的内存空间，KVM 引入一层新的地址空间，即客户机物理地址空间 (Guest Physical Address, GPA)，这个地址空间并不是真正的物理地址空间，它只是宿主机虚拟地址空间在客户机地址空间的一个映射。对客户机来说，客户机物理地址空间都是从零开始的连续地址空间，但对于宿主机来说，客户机的物理地址空间并不一定是连续的，客户机物理地址空间有可能映射在若干个不连续的宿主机地址区间，如下图所示：</p><p><img src="/2018/02/03/虚拟化/虚拟化入门/内存虚拟化.png" alt="内存虚拟化"></p><p>​     KVM 实现客户机内存的方式是，利用mmap系统调用，在QEMU主线程的虚拟地址空间中申明一段连续的大小的空间用于客户机物理内存映射，由此可知，于是，虚拟机的物理内存实际上是Qemu进程的虚拟地址，所以物理地址不能直接用于宿主机物理 MMU 进行寻址（因为vm的物理地址可能正好不在qemu的虚拟地址里，Guestos认为的物理地址，也是虚拟机mmu查页表得出的地址但是他本质是一个逻辑上的地址，是引入虚化后产生的一个逻辑概念。它必须借助于内存虚拟化映射到宿主机的物理地址上才能访问内存），所以需要把客户机物理地址转换成宿主机虚拟地址 (Host Virtual Address, HVA)，为此，KVM 用一个 kvm_memory_slot 数据结构来记录每一个地址区间的映射关系，此数据结构包含了对应此映射区间的起始客户机页帧号 (Guest Frame Number, GFN)，映射的内存页数目以及起始宿主机虚拟地址。于是 KVM 就可以实现对客户机物理地址到宿主机虚拟地址之间的转换，也即首先根据客户机物理地址找到对应的映射区间，然后根据此客户机物理地址在此映射区间的偏移量就可以得到其对应的宿主机虚拟地址。进而再通过宿主机的页表也可实现客户机物理地址到宿主机物理地址之间的转换，也即 GPA 到 HPA 的转换。</p><p>​    实现内存虚拟化，最主要的是实现客户机虚拟地址 (Guest Virtual Address, GVA) 到宿主机物理地址之间的转换。根据上述客户机物理地址到宿主机物理地址之间的转换以及客户机页表，即可实现客户机虚拟地址空间到客户机物理地址空间之间的映射，也即 GVA 到 HPA 的转换。显然通过这种映射方式，客户机的每次内存访问都需要 KVM 介入，并由软件进行多次地址转换，其效率是非常低的。因此，为了提高 GVA 到 HPA 转换的效率，KVM 提供了两种实现方式来进行客户机虚拟地址到宿主机物理地址之间的直接转换。其一是基于纯软件的实现方式，也即通过影子页表 (Shadow Page Table) 来实现客户虚拟地址到宿主机物理地址之间的直接转换。其二是基于硬件对虚拟化的支持，来实现两者之间的转换</p><p><strong>内存虚拟化难点：如何高效实现虚拟机的虚拟地址高效的转换为宿主机的物理地址</strong></p><h1 id="CPU虚拟化"><a href="#CPU虚拟化" class="headerlink" title="CPU虚拟化"></a>CPU虚拟化</h1><p>​    从宿主机的角度看，每个虚机对应的是一个qemu进程，那么虚机的vcpu就是qemu进程中的一个线程，vcpu的虚拟化主要就是在一块空间内保存vcpu各寄存器数据，然后根据调度算法将这些数据加载到物理cpu中执行，与普通线程的执行一样，执行的时间片结束后再将数据保存到vcpu所在空间。这里再说一下根模式与非根模式，cpu指令的执行权限分为几个特权等级，Linux为例有ring0~ring3等，虚机进程作为用户态程序属于低特权级别，运行模式称为非根模式；在执行特权操作时会被vmm捕获，然后进行切换到操作系统的ring0级别来执行，这样运行模式称为根模式，非根模式到根模式的切换，需要上下文的保存与加载，切换开销较大，当进行大量的切换时就会明显的影响到虚机的运行性能。 </p><p><strong>x86 CPU虚拟化难点</strong></p><ol><li>如何模拟x86的保护模式</li><li>如何拦截并执行虚拟机的ring0指令</li></ol><h1 id="IO虚拟化"><a href="#IO虚拟化" class="headerlink" title="IO虚拟化"></a>IO虚拟化</h1><p>​    kvm虚拟机方案的io虚拟化通常由qemu来实现，由qemu来模拟硬件设备的行为，并将返回值传给虚机，在这个过程有qemu同宿主机硬件设备的交互，也有一种方式是将宿主机的硬件设备透传给虚机使用，这样可以提升虚机的io性能，常见的有网卡，显卡的透传等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;虚拟化技术分类&quot;&gt;&lt;a href=&quot;#虚拟化技术分类&quot; class=&quot;headerlink&quot; title=&quot;虚拟化技术分类&quot;&gt;&lt;/a&gt;虚拟化技术分类&lt;/h1&gt;&lt;h2 id=&quot;全虚拟化：&quot;&gt;&lt;a href=&quot;#全虚拟化：&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="虚拟化" scheme="http://www.yang-qiang.com/categories/%E8%99%9A%E6%8B%9F%E5%8C%96/"/>
    
    
      <category term="虚拟化技术" scheme="http://www.yang-qiang.com/tags/%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
</feed>
